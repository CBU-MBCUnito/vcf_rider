var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"Relative","approx","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",0,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",0,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",0,null],[3,"Ulps","","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",1,null],[8,"ApproxEq","","Equality comparisons based on floating point tolerances.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",2,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",2,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",2,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",2,{"inputs":[],"output":{"name":"u32"}}],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",2,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",2,null],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",2,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",2,null],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",1,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ulps"}}],[11,"eq","","Peform the equality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_eq","","",null,null],[14,"assert_ulps_ne","","",null,null]],"paths":[[3,"Relative"],[3,"Ulps"],[8,"ApproxEq"]]};
searchIndex["argparse"] = {"doc":"","items":[[3,"StoreTrue","argparse","",null,null],[3,"StoreFalse","","",null,null],[3,"StoreConst","","",null,null],[12,"0","","",0,null],[3,"PushConst","","",null,null],[12,"0","","",1,null],[3,"Store","","",null,null],[3,"Parse","","",null,null],[3,"StoreOption","","",null,null],[3,"ParseOption","","",null,null],[3,"List","","",null,null],[3,"ParseList","","",null,null],[3,"Collect","","",null,null],[3,"ParseCollect","","",null,null],[3,"Print","","Print string and exit with status 0",null,null],[12,"0","","",2,null],[3,"IncrBy","","",null,null],[12,"0","","",3,null],[3,"DecrBy","","",null,null],[12,"0","","",4,null],[0,"action","","",null,null],[4,"ParseResult","argparse::action","",null,null],[13,"Parsed","","",5,null],[13,"Help","","",5,null],[13,"Exit","","",5,null],[13,"Error","","",5,null],[4,"Action","","",null,null],[13,"Flag","","",6,null],[13,"Single","","",6,null],[13,"Push","","",6,null],[13,"Many","","",6,null],[8,"TypedAction","","",null,null],[10,"bind","","",7,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[8,"IFlagAction","","",null,null],[10,"parse_flag","","",8,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[8,"IArgAction","","",null,null],[10,"parse_arg","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"parseresult"}}],[8,"IArgsAction","","",null,null],[10,"parse_args","","",10,null],[0,"parser","argparse","",null,null],[3,"Var","argparse::parser","",null,null],[3,"Ref","","",null,null],[3,"ArgumentParser","","The main argument parser class",null,null],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"var"}],"output":{"name":"bool"}}],[11,"add_option","","",12,null],[11,"add_argument","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"a"},{"name":"str"}],"output":{"name":"ref"}}],[11,"metavar","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ref"}}],[11,"required","","",12,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"envvar","","",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ref"}}],[11,"new","","Create an empty argument parser",13,{"inputs":[],"output":{"name":"argumentparser"}}],[11,"refer","","Borrow mutable variable for an argument",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"box"}}],[11,"add_option","","Add option to argument parser",13,null],[11,"set_description","","Set description of the command",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"print_help","","Print help",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"write"}],"output":{"name":"ioresult"}}],[11,"print_usage","","Print usage",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"write"}],"output":{"name":"ioresult"}}],[11,"parse","","Parse arguments",13,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"write"},{"name":"write"}],"output":{"name":"result"}}],[11,"error","","Write an error similar to one produced by the library itself",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"write"}],"output":null}],[11,"stop_on_first_argument","","Configure parser to ignore options when first non-option argument is encountered.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"silence_double_dash","","Do not put double-dash (bare `--`) into argument",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"parse_args","","Convenience method to parse arguments",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"parse_args_or_exit","","The simplest conveninece method",13,{"inputs":[{"name":"self"}],"output":null}],[11,"bind","argparse","",0,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",1,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",14,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",15,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",16,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",17,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",18,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",19,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",20,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",21,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"parse_flag","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"bind","","",22,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",23,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",3,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",4,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"action"}}],[8,"FromCommandLine","","",null,null],[10,"from_argument","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"StoreConst"],[3,"PushConst"],[3,"Print"],[3,"IncrBy"],[3,"DecrBy"],[4,"ParseResult"],[4,"Action"],[8,"TypedAction"],[8,"IFlagAction"],[8,"IArgAction"],[8,"IArgsAction"],[3,"Var"],[3,"Ref"],[3,"ArgumentParser"],[3,"Store"],[3,"StoreOption"],[3,"List"],[3,"Collect"],[3,"Parse"],[3,"ParseOption"],[3,"ParseList"],[3,"ParseCollect"],[3,"StoreTrue"],[3,"StoreFalse"],[8,"FromCommandLine"]]};
searchIndex["bio"] = {"doc":"Rust-bio, a bioinformatics library for Rust. This library provides implementations of many algorithms and data structures that are useful for bioinformatics. All provided implementations are rigorously tested via continuous integration. For installation instructions and a general overview, visit https://rust-bio.github.io.","items":[[0,"utils","bio","Common utilities.",null,null],[3,"NonNaNFloat","bio::utils","",null,null],[3,"Interval","","An `Interval` wraps the `std::ops::Range` from the stdlib and is defined by a start and end field where end should be >= start.",null,null],[4,"IntervalError","","",null,null],[13,"InvalidRange","","",0,null],[4,"Strand","","Strand information.",null,null],[13,"Forward","","",1,null],[13,"Reverse","","",1,null],[13,"Unknown","","",1,null],[4,"StrandError","","",null,null],[13,"InvalidChar","","",2,null],[5,"trim_newline","","Remove a trailing newline from the given string in place.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"scan","","In place implementation of scan over a slice.",null,null],[5,"prescan","","",null,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"nonnanfloat"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nonnanfloat"}}],[11,"new","","",3,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[11,"unwrap","","",3,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `Interval` from the given Range. Will return `Err` if end < start.",4,{"inputs":[{"name":"range"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"deref","","",4,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Text","","Type alias for an owned text, i.e. ``Vec<u8>``.",null,null],[6,"TextSlice","","Type alias for a text slice, i.e. ``&[u8]``.",null,null],[8,"TextIterator","","Type alias for an iterator over a sequence, i.e. ``Iterator<Item=&u8>``.",null,null],[8,"IntoTextIterator","","Type alias for a type that can be coerced into a `TextIterator`. This includes ``&Vec<u8>``, ``&[u8]``, ``Iterator<Item=&u8>``.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"strand"}}],[11,"eq","","Returns true if both are `Forward` or both are `Reverse`, otherwise returns false.",1,{"inputs":[{"name":"self"},{"name":"strand"}],"output":{"name":"bool"}}],[11,"from_char","","Returns a `Strand` enum representing the given char.",1,{"inputs":[{"name":"char"}],"output":{"name":"result"}}],[11,"is_unknown","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"alphabets","bio","Implementation of alphabets and useful utilities.",null,null],[3,"Alphabet","bio::alphabets","Representation of an alphabet.",null,null],[12,"symbols","","",5,null],[3,"RankTransform","","Tools based on transforming the alphabet symbols to their lexicographical ranks.",null,null],[12,"ranks","","",6,null],[3,"QGrams","","Iterator over q-grams.",null,null],[0,"dna","","Implementation of the DNA alphabet.",null,null],[5,"alphabet","bio::alphabets::dna","The DNA alphabet (uppercase and lowercase).",null,{"inputs":[],"output":{"name":"alphabet"}}],[5,"n_alphabet","","The DNA alphabet including N (uppercase and lowercase).",null,{"inputs":[],"output":{"name":"alphabet"}}],[5,"iupac_alphabet","","The IUPAC DNA alphabet (uppercase and lowercase).",null,{"inputs":[],"output":{"name":"alphabet"}}],[5,"complement","","Return complement of given DNA alphabet character (IUPAC alphabet supported).",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"revcomp","","Calculate reverse complement of given text (IUPAC alphabet supported).",null,{"inputs":[{"name":"t"}],"output":{"name":"vec"}}],[0,"protein","bio::alphabets","Implementation of the protein alphabet.",null,null],[5,"alphabet","bio::alphabets::protein","Returns the standard protein alphabet, containing the 20 common amino acids.",null,{"inputs":[],"output":{"name":"alphabet"}}],[6,"SymbolRanks","bio::alphabets","",null,null],[11,"new","","Create new alphabet from given symbols.",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"insert","","Insert symbol into alphabet.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"is_word","","Check if given text is a word over the alphabet.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"max_symbol","","Return lexicographically maximal symbol.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Return size of the alphabet.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Is this alphabet empty?",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `RankTransform`.",6,{"inputs":[{"name":"alphabet"}],"output":{"name":"self"}}],[11,"get","","Get the rank of symbol `a`.",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"transform","","Transform a given `text`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"vec"}}],[11,"qgrams","","Iterate over q-grams (substrings of length q) of given `text`. The q-grams are encoded as `usize` by storing the symbol ranks in log2(|A|) bits (with |A| being the alphabet size).",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"t"}],"output":{"name":"qgrams"}}],[11,"alphabet","","Restore alphabet from transform.",6,{"inputs":[{"name":"self"}],"output":{"name":"alphabet"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"pattern_matching","bio","This module contains various useful pattern matching algorithms. The implementations are based on the lecture notes \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[0,"shift_and","bio::pattern_matching","`ShiftAnd` algorithm for pattern matching. Patterns may contain at most 64 symbols. Complexity: O(n) with text length n.",null,null],[3,"ShiftAnd","bio::pattern_matching::shift_and","`ShiftAnd` algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[5,"masks","","Calculate ShiftAnd masks. This function is called automatically when instantiating a new ShiftAnd for a given pattern.",null,null],[11,"new","","Create new ShiftAnd instance from a given pattern.",8,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"find_all","","Find all matches of pattern in the given text. Matches are returned as an iterator over start positions.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"matches"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"kmp","bio::pattern_matching","Algorithm of Knuth Morris and Pratt. Constructs an automaton recognizing the pattern, and scans linearly over a text of length n. Complexity: O(n). The transition function delta is simulated via the lps-function, that assigns to each position q in the pattern the longest prefix of the pattern that is suffix of pattern[..q+1]. Then, in the NFA for the pattern, active states after reading position q are {q, lps(q), lps(lps(q)), ... 0}.",null,null],[3,"KMP","bio::pattern_matching::kmp","KMP algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",10,{"inputs":[{"name":"textslice"}],"output":{"name":"self"}}],[11,"find_all","","Find all matches of pattern in a given text. Matches are returned as iterator over start positions.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"matches"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"bom","bio::pattern_matching","Backward oracle matching algorithm. Best-case complexity: O(n / m) with pattern of length m and text of length n. Worst case complexity: O(n * m).",null,null],[3,"BOM","bio::pattern_matching::bom","Backward oracle matching algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",12,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"find_all","","Find all matches of the pattern in the given text. Matches are returned as an iterator over start positions.",12,{"inputs":[{"name":"self"},{"name":"textslice"}],"output":{"name":"matches"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"horspool","bio::pattern_matching","Algorithm of Horspool. Window-based, similar to but faster than Boyer-Moore.",null,null],[3,"Horspool","bio::pattern_matching::horspool","Algorithm of Horspool.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",14,{"inputs":[{"name":"textslice"}],"output":{"name":"self"}}],[11,"find_all","","Find all matches with a given text. Matches are returned as an iterator over start positions.",14,{"inputs":[{"name":"self"},{"name":"textslice"}],"output":{"name":"matches"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"bndm","bio::pattern_matching","Backward nondeterministic DAWG matching (BNDM). Best-case complexity: O(n / m) with pattern of length m <= 64 and text of length n. Worst case complexity: O(n * m).",null,null],[3,"BNDM","bio::pattern_matching::bndm","BNDM algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",16,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"find_all","","Find all matches of pattern with a given text. Matches are returned as iterator over start positions.",16,{"inputs":[{"name":"self"},{"name":"textslice"}],"output":{"name":"matches"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ukkonen","bio::pattern_matching","Bounded version of Ukkonens DP algorithm for approximate pattern matching. Complexity: O(n * k) on random texts.",null,null],[3,"Ukkonen","bio::pattern_matching::ukkonen","Ukkonens algorithm.",null,null],[3,"Matches","","Iterator over pairs of end positions and distance of matches.",null,null],[5,"unit_cost","","Default cost function (unit costs).",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"with_capacity","","Initialize algorithm with given capacity and cost function.",18,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"find_all_end","","Find all matches between pattern and text with up to k errors. Matches are returned as an iterator over pairs of end position and distance.",18,{"inputs":[{"name":"self"},{"name":"textslice"},{"name":"t"},{"name":"usize"}],"output":{"name":"matches"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"myers","bio::pattern_matching","Myers bit-parallel approximate pattern matching algorithm. Finds all matches up to a given edit distance. The pattern has to fit into a bitvector, and is here limited to 64 symbols. Complexity: O(n)",null,null],[3,"Myers","bio::pattern_matching::myers","Myers algorithm.",null,null],[3,"Matches","","Iterator over pairs of end positions and distance of matches.",null,null],[11,"new","","Create a new instance of Myers algorithm for a given pattern.",20,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"with_wildcard","","Create a new instance of Myers algorithm for a given pattern and a wildcard character that shall match any character.",20,{"inputs":[{"name":"textslice"},{"name":"u8"}],"output":{"name":"self"}}],[11,"distance","","Calculate the global distance of the pattern to the given text.",20,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"u8"}}],[11,"find_all_end","","Find all matches of pattern in the given text up to a given maximum distance. Matches are returned as an iterator over pairs of end position and distance.",20,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u8"}],"output":{"name":"matches"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"data_structures","bio","Various useful data structures.",null,null],[0,"rank_select","bio::data_structures","Rank/Select data structure based on Gonzalez, Grabowski, Mäkinen, Navarro (2005). This implementation uses only a single level of blocks, and performs well for large n.",null,null],[3,"RankSelect","bio::data_structures::rank_select","A rank/select data structure.",null,null],[11,"new","","Create a new instance.",22,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"rankselect"}}],[11,"rank","","Get the rank of a given bit, i.e. the number of 1-bits in the bitvector up to i (inclusive). Complexity: O(k).",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"select","","Get the smallest bit with a given rank. Complexity: O(log (n / k) + k).",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"suffix_array","bio::data_structures","Suffix arrays and related algorithms. The implementation is based on the lecture notes \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[5,"suffix_array","bio::data_structures::suffix_array","Construct suffix array for given text of length n. Complexity: O(n). This is an implementation of the induced sorting as presented by Ge Nong, Sen Zhang und Wai Hong Chan (2009), also known as SAIS. The implementation is based on the following lecture notes: http://ls11-www.cs.tu-dortmund.de/people/rahmann/algoseq.pdf",null,null],[5,"lcp","","Construct lcp array for given text and suffix array of length n. Complexity: O(n).",null,null],[5,"shortest_unique_substrings","","Calculate all locally shortest unique substrings from a given suffix and lcp array (Ohlebusch (2013). \"Bioinformatics Algorithms\". ISBN 978-3-00-041316-2). Complexity: O(n)",null,{"inputs":[{"name":"sa"},{"name":"lcparray"}],"output":{"name":"vec"}}],[6,"LCPArray","","",null,null],[6,"RawSuffixArray","","",null,null],[8,"SuffixArray","","A trait exposing general functionality of suffix arrays.",null,null],[10,"get","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[10,"len","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"is_empty","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"bwt","bio::data_structures","The Burrows-Wheeler-Transform and related data structures. The implementation is based on the lecture notes \"Algorithmen auf Sequenzen\", Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[3,"Occ","bio::data_structures::bwt","An occurence array implementation.",null,null],[5,"bwt","","Calculate Burrows-Wheeler-Transform of the given text of length n. Complexity: O(n).",null,null],[5,"invert_bwt","","Calculate the inverse of a BWT of length n, which is the original text. Complexity: O(n).",null,{"inputs":[{"name":"bwtslice"}],"output":{"name":"vec"}}],[5,"less","","Calculate the less array for a given BWT. Complexity O(n).",null,{"inputs":[{"name":"bwtslice"},{"name":"alphabet"}],"output":{"name":"less"}}],[5,"bwtfind","","Calculate the bwtfind array needed for inverting the BWT. Complexity O(n).",null,{"inputs":[{"name":"bwtslice"},{"name":"alphabet"}],"output":{"name":"bwtfind"}}],[6,"BWT","","",null,null],[6,"BWTSlice","","",null,null],[6,"Less","","",null,null],[6,"BWTFind","","",null,null],[8,"DerefBWT","","",null,null],[8,"DerefOcc","","",null,null],[8,"DerefLess","","",null,null],[11,"new","","Calculate occ array with sampling from BWT of length n. Time complexity: O(n). Space complexity: O(n / k * A) with A being the alphabet size. Alphabet size is determined on the fly from the BWT. For large texts, it is therefore advisable to transform the text before calculating the BWT (see alphabets::rank_transform).",25,{"inputs":[{"name":"bwtslice"},{"name":"u32"},{"name":"alphabet"}],"output":{"name":"self"}}],[11,"get","","Get occurrence count of symbol a in BWT[..r+1]. Complexity: O(k).",25,{"inputs":[{"name":"self"},{"name":"bwtslice"},{"name":"usize"},{"name":"u8"}],"output":{"name":"usize"}}],[0,"bitenc","bio::data_structures","A fixed-width bit encoding implementation. This allows to store a sequence of values over a reduced alphabet by packing them bit-encoded into a sequence of bytes.",null,null],[3,"BitEnc","bio::data_structures::bitenc","A sequence of bitencoded values.",null,null],[3,"BitEncIter","","Iterator over values of a bitencoded sequence (values will be unpacked into bytes).",null,null],[11,"new","","Create a new instance with a given encoding width (e.g. width=2 for using two bits per value).",26,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity","","Create a new instance with a given capacity and encoding width (e.g. width=2 for using two bits per value).",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","Append a value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"push_values","","Append `n` times the given value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"set","","Set the value as position `i`.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"get","","Get the value at position `i`.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Iterate over stored values (values will be unpacked into bytes).",26,{"inputs":[{"name":"self"}],"output":{"name":"bitenciter"}}],[11,"clear","","Clear the sequence.",26,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"smallints","bio::data_structures","A data structure for a sequence of small integers with a few big integers. Small ints are stored in type S (e.g. a byte), big ints are stored separately (in type B) in a BTree. The implementation provides vector-like operations on the data structure (e.g. retrieve a position, add an integer, etc.).",null,null],[3,"SmallInts","bio::data_structures::smallints","Data structure for storing a sequence of small integers with few big ones space efficiently while supporting classical vector operations.",null,null],[3,"Iter","","Iterator over the elements of a `SmallInts` sequence.",null,null],[11,"new","","Create a new instance.",28,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new instance with a given capacity.",28,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_elem","","Create a new instance containing `n` times the integer `v` (and `v` is expected to be small).",28,{"inputs":[{"name":"s"},{"name":"usize"}],"output":{"name":"self"}}],[11,"get","","Return the integer at position `i`.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"push","","Append `v` to the sequence. This will determine whether `v` is big or small and store it accordingly.",28,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"set","","Set value of position `i` to `v`. This will determine whether `v` is big or small and store it accordingly.",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"b"}],"output":null}],[11,"iter","","Iterate over sequence. Values will be returned in the big integer type (`B`).",28,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"decompress","","Decompress into a normal vector of big integers (type `B`).",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Length of the sequence.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","is the sequence empty?",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"fmindex","bio::data_structures","FM-Index and FMD-Index for finding suffix array intervals matching a given pattern in linear time.",null,null],[3,"Interval","bio::data_structures::fmindex","A suffix array interval.",null,null],[12,"lower","","",30,null],[12,"upper","","",30,null],[3,"FMIndex","","The Fast Index in Minute space (FM-Index, Ferragina and Manzini, 2000) for finding suffix array intervals matching a given pattern.",null,null],[3,"BiInterval","","A bi-interval on suffix array of the forward and reverse strand of a DNA text.",null,null],[3,"FMDIndex","","The FMD-Index for linear time search of supermaximal exact matches on forward and reverse strand of DNA texts (Li, 2012).",null,null],[8,"FMIndexable","","",null,null],[10,"occ","","Get occurrence count of symbol a in BWT[..r+1].",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":{"name":"usize"}}],[10,"less","","Also known as",31,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[10,"bwt","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bwt"}}],[11,"backward_search","","Perform backward search, yielding suffix array interval denoting exact occurrences of the given pattern of length m in the text. Complexity: O(m).",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"interval"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"occ","","",30,{"inputs":[{"name":"self"},{"name":"sa"}],"output":{"name":"vec"}}],[11,"occ","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"less","","",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"bwt","","Provide a reference to the underlying BWT.",32,{"inputs":[{"name":"self"}],"output":{"name":"bwt"}}],[11,"new","","Construct a new instance of the FM index.",32,{"inputs":[{"name":"dbwt"},{"name":"dless"},{"name":"docc"}],"output":{"name":"self"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"biinterval"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"biinterval"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"biinterval"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"forward","","",33,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"revcomp","","",33,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"occ","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"less","","",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"usize"}}],[11,"bwt","","Provide a reference to the underlying BWT.",34,{"inputs":[{"name":"self"}],"output":{"name":"bwt"}}],[11,"from","","Construct a new instance of the FMD index (see Heng Li (2012) Bioinformatics). This expects a BWT that was created from a text over the DNA alphabet with N (`alphabets::dna::n_alphabet()`) consisting of the concatenation with its reverse complement, separated by the sentinel symbol `$`. I.e., let T be the original text and R be its reverse complement. Then, the expected text is T$R$. Further, multiple concatenated texts are allowed, e.g. T1$R1$T2$R2$T3$R3$.",34,{"inputs":[{"name":"fmindex"}],"output":{"name":"fmdindex"}}],[11,"smems","","Find supermaximal exact matches of given pattern that overlap position i in the pattern. Complexity O(m) with pattern of length m.",34,null],[11,"init_interval_with","","Initialize interval with given start character.",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biinterval"}}],[11,"init_interval","","Initialize interval for empty pattern. The interval points at the whole suffix array.",34,{"inputs":[{"name":"self"}],"output":{"name":"biinterval"}}],[11,"backward_ext","","Backward extension of given interval with given character.",34,{"inputs":[{"name":"self"},{"name":"biinterval"},{"name":"u8"}],"output":{"name":"biinterval"}}],[11,"forward_ext","","",34,{"inputs":[{"name":"self"},{"name":"biinterval"},{"name":"u8"}],"output":{"name":"biinterval"}}],[0,"qgram_index","bio::data_structures","A classical, flexible, q-gram index implementation.",null,null],[3,"QGramIndex","bio::data_structures::qgram_index","A classical, flexible, q-gram index implementation.",null,null],[3,"Interval","","An interval, consisting of start and stop position (the latter exclusive).",null,null],[12,"start","","",35,null],[12,"stop","","",35,null],[3,"Match","","A match between the pattern and the text.",null,null],[12,"pattern","","",36,null],[12,"text","","",36,null],[12,"count","","",36,null],[3,"ExactMatch","","An exact match between the pattern and the text.",null,null],[12,"pattern","","",37,null],[12,"text","","",37,null],[11,"new","","Create a new q-gram index. The q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number bits with the `usize` data type.",38,null],[11,"with_max_count","","Create a new q-gram index, only considering q-grams that occur at most `max_count` times. The q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number bits with the `usize` data type.",38,null],[11,"q","","The used q.",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"qgram_matches","","Return text positions with matching q-gram. Complexity O(1).",38,null],[11,"matches","","Return matches of the given pattern. Complexity O(m + k) for pattern of length m and k being the number of matching q-grams.",38,null],[11,"exact_matches","","Return exact matches (substrings) of the given pattern. Complexity O(m + k) for pattern of length m and k being the number of matching q-grams.",38,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"get","","Get the text within the given interval.",35,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"exactmatch"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"exactmatch"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"exactmatch"}}],[0,"interval_tree","bio::data_structures","Interval tree, a data structure for efficiently storing and searching intervals.",null,null],[3,"IntervalTree","bio::data_structures::interval_tree","An interval tree for storing intervals with data",null,null],[3,"Entry","","An `Entry` is used by the `IntervalTreeIterator` to return references to the data in the tree",null,null],[3,"IntervalTreeIterator","","An `IntervalTreeIterator` is returned by `Intervaltree::find` and iterates over the entries overlapping the query",null,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"intervaltree"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"entry"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"data","","Get a reference to the data for this entry",40,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"interval","","Get a reference to the interval for this entry",40,{"inputs":[{"name":"self"}],"output":{"name":"interval"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new empty `IntervalTree`",39,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Inserts an `Interval` into the tree and associates it with `data`",39,{"inputs":[{"name":"self"},{"name":"i"},{"name":"d"}],"output":null}],[11,"find","","Uses the provided `Interval` to find overlapping intervals in the tree and returns an `IntervalTreeIterator`",39,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"intervaltreeiterator"}}],[11,"from_iter","","",39,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[0,"alignment","bio","Various alignment and distance computing algorithms.",null,null],[3,"Alignment","bio::alignment","An alignment, consisting of a score, the start and end position of the alignment on sequence x and sequence y, the length of sequence x, and the alignment edit operations (see `alignment::pairwise` for meaning of x and y).",null,null],[12,"score","","",42,null],[12,"ystart","","",42,null],[12,"xstart","","",42,null],[12,"yend","","",42,null],[12,"xend","","",42,null],[12,"xlen","","",42,null],[12,"operations","","",42,null],[4,"AlignmentOperation","","Alignment operations (Match, Subst, Del and Ins).",null,null],[13,"Match","","",43,null],[13,"Subst","","",43,null],[13,"Del","","",43,null],[13,"Ins","","",43,null],[0,"pairwise","","Calculate alignments with a generalized variant of the Smith Waterman algorithm. Complexity: O(n * m) for strings of length m and n.",null,null],[3,"Aligner","bio::alignment::pairwise","A generalized Smith-Waterman aligner.",null,null],[11,"new","","Create new aligner instance with given gap open and gap extend penalties and the score function.",44,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_capacity","","Create new aligner instance. The size hints help to avoid unnecessary memory allocations.",44,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"},{"name":"f"}],"output":{"name":"self"}}],[11,"global","","Calculate global alignment of x against y.",44,{"inputs":[{"name":"self"},{"name":"textslice"},{"name":"textslice"}],"output":{"name":"alignment"}}],[11,"semiglobal","","Calculate semiglobal alignment of x against y (x is global, y is local).",44,{"inputs":[{"name":"self"},{"name":"textslice"},{"name":"textslice"}],"output":{"name":"alignment"}}],[11,"local","","Calculate local alignment of x against y.",44,{"inputs":[{"name":"self"},{"name":"textslice"},{"name":"textslice"}],"output":{"name":"alignment"}}],[0,"distance","bio::alignment","Various subroutines for computing a distance between sequences.",null,null],[5,"hamming","bio::alignment::distance","Compute the Hamming distance between two strings. Complexity: O(n).",null,{"inputs":[{"name":"textslice"},{"name":"textslice"}],"output":{"name":"u64"}}],[5,"levenshtein","","Compute the Levenshtein (or Edit) distance between two strings. Complexity: O(n * m) with n and m being the length of the given texts.",null,{"inputs":[{"name":"textslice"},{"name":"textslice"}],"output":{"name":"u32"}}],[11,"eq","bio::alignment","",43,{"inputs":[{"name":"self"},{"name":"alignmentoperation"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"alignmentoperation"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cigar","","Calculate the cigar string.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"string"}}],[11,"pretty","","Return the pretty formatted alignment as a String.",42,{"inputs":[{"name":"self"},{"name":"textslice"},{"name":"textslice"}],"output":{"name":"string"}}],[0,"io","bio","Readers and writers for common bioinformatics file formats.",null,null],[0,"fastq","bio::io","FastQ reading and writing.",null,null],[3,"Reader","bio::io::fastq","A FastQ reader.",null,null],[3,"Record","","A FastQ record.",null,null],[3,"Records","","An iterator over the records of a FastQ file.",null,null],[3,"Writer","","A FastQ writer.",null,null],[11,"from_file","","Read from a given file.",45,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Read from a given `io::Read`.",45,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"read","","Read into a given record. Returns an error if the record in incomplete or syntax is violated. The content of the record can be checked via the record object.",45,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Return an iterator over the records of this FastQ file.",45,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"record"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"record"}}],[11,"new","","Create a new, empty FastQ record.",46,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Check if record is empty.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"check","","Check validity of FastQ record.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"id","","Return the id of the record.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"desc","","Return descriptions if present.",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"seq","","Return the sequence of the record.",46,{"inputs":[{"name":"self"}],"output":{"name":"textslice"}}],[11,"qual","","Return the base qualities of the record.",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_file","","Write to a given file path.",48,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Write to a given `io::Write`.",48,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"write_record","","Directly write a FastQ record.",48,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"write","","Write a FastQ record with given id, optional description, sequence and qualities.",48,null],[11,"flush","","Flush the writer, ensuring that everything is written.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"fasta","bio::io","FASTA format reading and writing.",null,null],[3,"Reader","bio::io::fasta","A FASTA reader.",null,null],[3,"Index","","A FASTA index as created by SAMtools (.fai).",null,null],[3,"IndexedReader","","A FASTA reader with an index as created by SAMtools (.fai).",null,null],[12,"index","","",49,null],[3,"Sequence","","A sequence record returned by the FASTA index.",null,null],[12,"name","","",50,null],[12,"len","","",50,null],[3,"Writer","","A Fasta writer.",null,null],[3,"Record","","A FASTA record.",null,null],[3,"Records","","An iterator over the records of a Fasta file.",null,null],[11,"from_file","","Read FASTA from given file path.",51,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Create a new Fasta reader given an instance of `io::Read`.",51,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"read","","Read next FASTA record into the given `Record`.",51,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Return an iterator over the records of this FastQ file.",51,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[11,"new","","Open a FASTA index from a given `io::Read` instance.",52,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"from_file","","Open a FASTA index from a given file path.",52,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"with_fasta_file","","Open a FASTA index given the corresponding FASTA file path (e.g. for ref.fasta we expect ref.fasta.fai).",52,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sequences","","Return a vector of sequences described in the index.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_file","","Read from a given file path. This assumes the index ref.fasta.fai to be present for FASTA ref.fasta.",49,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Read from a FASTA and its index, both given as `io::Read`. FASTA has to be `io::Seek` in addition.",49,{"inputs":[{"name":"r"},{"name":"i"}],"output":{"name":"result"}}],[11,"with_index","","Read from a FASTA and its index, the first given as `io::Read`, the second given as index object.",49,{"inputs":[{"name":"r"},{"name":"index"}],"output":{"name":"self"}}],[11,"read_all","","For a given seqname, read the whole sequence into the given vector.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"text"}],"output":{"name":"result"}}],[11,"read","","Read the given interval of the given seqname into the given vector (stop position is exclusive).",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"},{"name":"u64"},{"name":"text"}],"output":{"name":"result"}}],[11,"to_file","","Write to the given file path.",53,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Create a new Fasta writer.",53,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"write_record","","Directly write a Fasta record.",53,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"write","","Write a Fasta record with given id, optional description and sequence.",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"textslice"}],"output":{"name":"result"}}],[11,"flush","","Flush the writer, ensuring that everything is written.",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"record"}}],[11,"new","","Create a new instance.",54,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Check if record is empty.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"check","","Check validity of Fasta record.",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"id","","Return the id of the record.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"desc","","Return descriptions if present.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"seq","","Return the sequence of the record.",54,{"inputs":[{"name":"self"}],"output":{"name":"textslice"}}],[11,"next","","",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"bed","bio::io","BED format reading and writing.",null,null],[3,"Reader","bio::io::bed","A BED reader.",null,null],[3,"Records","","A BED record.",null,null],[3,"Writer","","A BED writer.",null,null],[3,"Record","","A BED record as defined by BEDtools (http://bedtools.readthedocs.org/en/latest/content/general-usage.html)",null,null],[11,"from_file","","Read from a given file path.",56,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Read from a given reader.",56,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"records","","Iterate over all records.",56,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[11,"next","","",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_file","","Write to a given file path.",58,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Write to a given writer.",58,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"write","","Write a given BED record.",58,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"record"}}],[11,"new","","Create a new BED record.",59,{"inputs":[],"output":{"name":"self"}}],[11,"chrom","","Chromosome of the feature.",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"start","","Start position of feature (0-based).",59,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"end","","End position of feature (0-based, not included).",59,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"name","","Name of the feature.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"score","","Score of the feature.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strand","","Strand of the feature.",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"aux","","Access auxilliary fields after the strand field by index (counting first field (chromosome) as 0).",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set_chrom","","Set chromosome.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_start","","Set start of feature.",59,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_end","","Set end of feature.",59,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_name","","Set name.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"set_score","","Set score.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_aux","","Add auxilliary field. This has to happen after name and score have been set.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[0,"gff","bio::io","GFF3 format reading and writing.",null,null],[3,"Reader","bio::io::gff","A GFF reader.",null,null],[3,"Records","","A GFF record.",null,null],[3,"Writer","","A GFF writer.",null,null],[3,"Record","","A GFF record",null,null],[4,"GffType","","`GffType`",null,null],[13,"GFF3","","Attribute format is key1=value, key2=value",60,null],[13,"GFF2","","Attribute format is key1 value; key2 value",60,null],[13,"GTF2","","Same as GFF2 just possible keyword and possible value change",60,null],[13,"Any","","Any, first field of tuple is key value separator, second is field separator",60,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"gfftype"}}],[11,"from_file","","Read GFF from given file path in given format.",61,{"inputs":[{"name":"p"},{"name":"gfftype"}],"output":{"name":"result"}}],[11,"new","","Create a new GFF reader given an instance of `io::Read`, in given format.",61,{"inputs":[{"name":"r"},{"name":"gfftype"}],"output":{"name":"self"}}],[11,"records","","Iterate over all records.",61,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_file","","Write to a given file path in given format.",63,{"inputs":[{"name":"p"},{"name":"gfftype"}],"output":{"name":"result"}}],[11,"new","","Write to a given writer.",63,{"inputs":[{"name":"w"},{"name":"gfftype"}],"output":{"name":"self"}}],[11,"write","","Write a given GFF record.",63,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"record"}}],[11,"new","","Create a new GFF record.",64,{"inputs":[],"output":{"name":"self"}}],[11,"seqname","","Sequence name of the feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"source","","Source of the feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"feature_type","","Type of the feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"start","","Start position of feature (1-based).",64,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"end","","End position of feature (1-based, not included).",64,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"score","","Score of feature",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"strand","","Strand of the feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"frame","","Frame of the feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"attributes","","Attribute of feature",64,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"seqname_mut","","Get mutable reference on seqname of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"source_mut","","Get mutable reference on source of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"feature_type_mut","","Get mutable reference on type of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"start_mut","","Get mutable reference on start of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"end_mut","","Get mutable reference on end of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"score_mut","","Get mutable reference on score of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"strand_mut","","Get mutable reference on strand of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"attributes_mut","","Get mutable reference on attributes of feature.",64,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[0,"seq_analysis","bio","Sequence analysis algorithms.",null,null],[0,"orf","bio::seq_analysis","One-way orf finder algorithm.",null,null],[3,"Finder","bio::seq_analysis::orf","An implementation of a naive algorithm finder",null,null],[3,"Orf","","An orf representation with start and end position of said orf, as well as offset of the reading frame (1,2,3) and strand location",null,null],[12,"start","","",65,null],[12,"end","","",65,null],[12,"offset","","",65,null],[3,"Matches","","Iterator over offset, start position, end position and sequence of matched orfs.",null,null],[11,"new","","Create a new instance of a finder for the given start and stop codons and a particular length",66,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"find_all","","Find all orfs in the given sequence",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"matches"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"gc","bio::seq_analysis","GC counter over an `IntoTextIterator` object. Complexity: o(n)",null,null],[5,"gc_content","bio::seq_analysis::gc","gc content counter for every nucleotide",null,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[5,"gc3_content","","gc content counter for the nucleotide in 3rd position",null,{"inputs":[{"name":"i"}],"output":{"name":"f32"}}],[0,"stats","bio","Mathematical and statistical tools.",null,null],[0,"combinatorics","bio::stats","Combinations with and without replacement.",null,null],[5,"scaled_combinations","bio::stats::combinatorics","Calculate the number of combinations when choosing k elements from n elements without replacement, multiplied by a scaling factor.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"combinations","","Calculate the number of combinations when choosing k elements from n elements without replacement. This is also known as n over k, or the binomial coefficient.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"f64"}}],[5,"combinations_with_repl","","Calculate the number of combinations when choosing k elements from n elements with replacement.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"f64"}}],[0,"probs","bio::stats","Handling log-probabilities.",null,null],[3,"Prob","bio::stats::probs","A newtype for probabilities.",null,null],[12,"0","","",68,null],[3,"LogProb","","A newtype for log-scale probabilities.",null,null],[12,"0","","",69,null],[3,"PHREDProb","","A newtype for PHRED-scale probabilities.",null,null],[12,"0","","",70,null],[4,"ProbError","","",null,null],[13,"InvalidProb","","",71,null],[0,"cdf","","Support for discrete probability distributions in terms of cumulative distribution functions (CDF).",null,null],[3,"Entry","bio::stats::probs::cdf","",null,null],[12,"value","","",72,null],[12,"prob","","",72,null],[3,"CDF","","Implementation of a cumulative distribution function.",null,null],[6,"CDFPMFIter","","",null,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"new","","",72,{"inputs":[{"name":"t"},{"name":"logprob"}],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"cdf"}}],[11,"from_pmf","","Create CDF from given probability mass function (PMF). The PMF may contain duplicate values the probabilities of which are summed during generation of the CDF.",73,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_cdf","","Create CDF from iterator. This can be used to replace the values of a CDF.",73,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"reduce","","Reduce CDF by omitting values with zero probability.",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","Downsample CDF to n entries. Panics if n <= 1 and returns identity if n is greater than the number of entries.",73,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"iter","","Provide iterator.",73,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_pmf","","Iterator over corresponding PMF.",73,{"inputs":[{"name":"self"}],"output":{"name":"cdfpmfiter"}}],[11,"get","","Get cumulative probability for a given value. If the value is not present, return the probability of the previous value. Complexity O(log n).",73,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_pmf","","Get probability (i.e. probability mass) for a given value. Complexity O(log n).",73,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"total_prob","","Return total probability.",73,{"inputs":[{"name":"self"}],"output":{"name":"logprob"}}],[11,"map","","Return maximum a posteriori probability estimate (MAP).",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"credible_interval","","Return w%-credible interval. The width w is a float between 0 and 1. Panics otherwise. E.g. provide `width=0.95` for the 95% credible interval.",73,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"range"}}],[11,"len","","Number of entries in the CDF.",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"expected_value","","Calculate expected value.",73,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"variance","","Calculate variance.",73,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"standard_deviation","","Calculate standard deviation.",73,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[6,"ScanIter","bio::stats::probs","Iterator returned by scans over logprobs.",null,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"prob"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"prob"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from","","",68,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"deref","","",68,null],[11,"add","","",68,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"prob"}}],[11,"add","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"prob"}}],[11,"sub","","",68,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"prob"}}],[11,"sub","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"prob"}}],[11,"mul","","",68,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"prob"}}],[11,"mul","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"prob"}}],[11,"div","","",68,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"prob"}}],[11,"div","","",68,{"inputs":[{"name":"self"},{"name":"prob"}],"output":{"name":"prob"}}],[11,"checked","","",68,{"inputs":[{"name":"f64"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"option"}}],[11,"lt","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"bool"}}],[11,"le","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"bool"}}],[11,"gt","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"bool"}}],[11,"ge","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"logprob"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from","","",69,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"deref","","",69,null],[11,"add","","",69,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"logprob"}}],[11,"add","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"logprob"}}],[11,"sub","","",69,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"logprob"}}],[11,"sub","","",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"logprob"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"phredprob"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from","","",70,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"deref","","",70,null],[11,"add","","",70,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"phredprob"}}],[11,"add","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"phredprob"}}],[11,"sub","","",70,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"phredprob"}}],[11,"sub","","",70,{"inputs":[{"name":"self"},{"name":"phredprob"}],"output":{"name":"phredprob"}}],[11,"ln_zero","","Log-space representation of Pr=0",69,{"inputs":[],"output":{"name":"logprob"}}],[11,"ln_one","","Log-space representation of Pr=1",69,{"inputs":[],"output":{"name":"logprob"}}],[11,"ln_one_minus_exp","","Numerically stable calculation of 1 - p in log-space.",69,{"inputs":[{"name":"self"}],"output":{"name":"logprob"}}],[11,"ln_sum_exp","","Numerically stable sum of probabilities in log-space.",69,null],[11,"ln_add_exp","","Numerically stable addition probabilities in log-space.",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"logprob"}}],[11,"ln_sub_exp","","Numerically stable subtraction of probabilities in log-space.",69,{"inputs":[{"name":"self"},{"name":"logprob"}],"output":{"name":"logprob"}}],[11,"ln_cumsum_exp","","Calculate the cumulative sum of the given probabilities in a numerically stable way (Durbin 1998).",69,{"inputs":[{"name":"i"}],"output":{"name":"scaniter"}}],[11,"ln_trapezoidal_integrate_exp","","Integrate numerically stable over given log-space density in the interval [a, b]. Uses the trapezoidal rule with n grid points.",69,{"inputs":[{"name":"d"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":{"name":"logprob"}}],[11,"ln_simpsons_integrate_exp","","Integrate numerically stable over given log-space density in the interval [a, b]. Uses Simpson's rule with n (odd) grid points.",69,{"inputs":[{"name":"d"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":{"name":"logprob"}}],[11,"from","","",68,{"inputs":[{"name":"logprob"}],"output":{"name":"prob"}}],[11,"from","","",68,{"inputs":[{"name":"phredprob"}],"output":{"name":"prob"}}],[11,"from","","",69,{"inputs":[{"name":"prob"}],"output":{"name":"logprob"}}],[11,"from","","",69,{"inputs":[{"name":"phredprob"}],"output":{"name":"logprob"}}],[11,"from","","",70,{"inputs":[{"name":"prob"}],"output":{"name":"phredprob"}}],[11,"from","","",70,{"inputs":[{"name":"logprob"}],"output":{"name":"phredprob"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"logprob"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"phredprob"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"bayesian","bio::stats","Utilities for Bayesian statistics.",null,null],[5,"expected_fdr","bio::stats::bayesian","For each of the hypothesis tests given as posterior error probabilities (PEPs, i.e. the posterior probability of the null hypothesis), estimate the FDR for the case that all null hypotheses with at most this PEP are rejected. FDR is calculated as presented by Müller, Parmigiani, and Rice, \"FDR and Bayesian Multiple Comparisons Rules\" (July 2006). Johns Hopkin's University, Dept. of Biostatistics Working Papers. Working Paper 115.",null,null],[0,"scores","bio","",null,null],[0,"blosum62","bio::scores","",null,null],[5,"blosum62","bio::scores::blosum62","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[0,"pam40","bio::scores","",null,null],[5,"pam40","bio::scores::pam40","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[0,"pam120","bio::scores","",null,null],[5,"pam120","bio::scores::pam120","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[0,"pam200","bio::scores","",null,null],[5,"pam200","bio::scores::pam200","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[0,"pam250","bio::scores","",null,null],[5,"pam250","bio::scores::pam250","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}]],"paths":[[4,"IntervalError"],[4,"Strand"],[4,"StrandError"],[3,"NonNaNFloat"],[3,"Interval"],[3,"Alphabet"],[3,"RankTransform"],[3,"QGrams"],[3,"ShiftAnd"],[3,"Matches"],[3,"KMP"],[3,"Matches"],[3,"BOM"],[3,"Matches"],[3,"Horspool"],[3,"Matches"],[3,"BNDM"],[3,"Matches"],[3,"Ukkonen"],[3,"Matches"],[3,"Myers"],[3,"Matches"],[3,"RankSelect"],[8,"SuffixArray"],[6,"RawSuffixArray"],[3,"Occ"],[3,"BitEnc"],[3,"BitEncIter"],[3,"SmallInts"],[3,"Iter"],[3,"Interval"],[8,"FMIndexable"],[3,"FMIndex"],[3,"BiInterval"],[3,"FMDIndex"],[3,"Interval"],[3,"Match"],[3,"ExactMatch"],[3,"QGramIndex"],[3,"IntervalTree"],[3,"Entry"],[3,"IntervalTreeIterator"],[3,"Alignment"],[4,"AlignmentOperation"],[3,"Aligner"],[3,"Reader"],[3,"Record"],[3,"Records"],[3,"Writer"],[3,"IndexedReader"],[3,"Sequence"],[3,"Reader"],[3,"Index"],[3,"Writer"],[3,"Record"],[3,"Records"],[3,"Reader"],[3,"Records"],[3,"Writer"],[3,"Record"],[4,"GffType"],[3,"Reader"],[3,"Records"],[3,"Writer"],[3,"Record"],[3,"Orf"],[3,"Finder"],[3,"Matches"],[3,"Prob"],[3,"LogProb"],[3,"PHREDProb"],[4,"ProbError"],[3,"Entry"],[3,"CDF"]]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying representation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to hold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`. See union_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`. See intersect_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`. See difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`. See symmetric_difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"len","","Returns the number of set bits in this set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",0,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if this set contains the specified integer.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1's in the bitwise repr",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element to `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits, with the most significant bits of each byte coming first. Each bit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index is `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the bitwise `and` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the `BitVec` becomes the high-order bit of the first byte. If the size of the `BitVec` is not a multiple of eight then trailing bits will be filled-in with `false`.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s. Both the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given `BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the given `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[6,"__BitFlagsWidth","bitflags","",null,null],[14,"bitflags","","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["csv"] = {"doc":"This crate provides a streaming CSV (comma separated values) writer and reader that works with the `serialize` crate to do type based encoding and decoding. There are two primary goals of this project:","items":[[3,"Encoded","csv","A record to be encoded.",null,null],[3,"Decoded","","A record to be decoded.",null,null],[3,"Reader","","A CSV reader.",null,null],[3,"DecodedRecords","","An iterator of decoded records.",null,null],[3,"StringRecords","","An iterator of `String` records.",null,null],[3,"ByteRecords","","An iterator of `ByteString` records.",null,null],[3,"Writer","","A CSV writer.",null,null],[3,"LocatableError","","An error tagged with a location at which it occurred.",null,null],[12,"record","","The record number (starting at 1).",0,null],[12,"field","","The field number (starting at 1).",0,null],[12,"err","","The error.",0,null],[4,"NextField","","NextField is the result of parsing a single CSV field.",null,null],[13,"Data","","A single CSV field as a borrowed slice of the parser's internal buffer.",1,null],[13,"Error","","A CSV error found during parsing. When an error is found, it is first returned. All subsequent calls of `next_bytes` will return `EndOfCsv`. (EOF is exempt from this. Depending on the state of the parser, an EOF could trigger `Data`, `EndOfRecord` and `EndOfCsv`, all in succession.)",1,null],[13,"EndOfRecord","","Indicates the end of a record.",1,null],[13,"EndOfCsv","","Indicates the end of the CSV data. Once this state is entered, the parser can never leave it.",1,null],[4,"RecordTerminator","","A record terminator.",null,null],[13,"CRLF","","Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.",2,null],[13,"Any","","Parses the byte given as a record terminator.",2,null],[4,"QuoteStyle","","The quoting style to use when writing CSV data.",null,null],[13,"Always","","This puts quotes around every field. Always.",3,null],[13,"Necessary","","This puts quotes around fields only when necessary.",3,null],[13,"Never","","This *never* writes quotes.",3,null],[4,"Error","","An error produced by an operation on CSV data.",null,null],[13,"Encode","","An error reported by the type-based encoder.",4,null],[13,"Decode","","An error reported by the type-based decoder.",4,null],[13,"Parse","","An error reported by the CSV parser.",4,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",4,null],[13,"Index","","An error originating from using a CSV index.",4,null],[4,"ParseError","","A description of a CSV parse error.",null,null],[13,"UnequalLengths","","A record was found that has a different size than other records.",5,null],[12,"expected","csv::ParseError","Expected a record with this many fields.",5,null],[12,"got","","Got a record with this many fields.",5,null],[13,"InvalidUtf8","csv","An error occurred when trying to convert a field to a Unicode string.",5,null],[0,"index","","This sub-module provides experimental CSV record indexing.",null,null],[3,"Indexed","csv::index","A type for representing CSV data with a basic record index.",null,null],[5,"create_index","","Creates a new index for the given CSV reader.",null,{"inputs":[{"name":"reader"},{"name":"w"}],"output":{"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"open","","Opens a new index corresponding to the CSV reader given.",6,{"inputs":[{"name":"reader"},{"name":"i"}],"output":{"name":"result"}}],[11,"seek","","Seeks to `i`th record.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"count","","Returns the number of CSV records in the index in `O(1)` time.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","csv","Creates a new encodable record. The value returned can be passed to `Encodable::encode`.",7,{"inputs":[],"output":{"name":"encoded"}}],[11,"unwrap","","Once a record has been encoded into this value, `unwrap` can be used to access the raw CSV record.",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"emit_nil","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_usize","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",7,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",7,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Creates a new decodable record from a record of byte strings.",8,{"inputs":[{"name":"vec"}],"output":{"name":"decoded"}}],[11,"error","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_usize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_isize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_bool","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_char","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_str","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_enum","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recordterminator"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_reader","","Creates a new CSV reader from an arbitrary `io::Read`.",9,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","Creates a new CSV reader for the data at the file path given.",9,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_string","","Creates a CSV reader for an in memory string buffer.",9,{"inputs":[{"name":"s"}],"output":{"name":"reader"}}],[11,"from_bytes","","Creates a CSV reader for an in memory buffer of bytes.",9,{"inputs":[{"name":"v"}],"output":{"name":"reader"}}],[11,"decode","","Uses type-based decoding to read a single record from CSV data.",9,{"inputs":[{"name":"self"}],"output":{"name":"decodedrecords"}}],[11,"records","","Returns an iterator of records in the CSV data where each field is a `String`.",9,{"inputs":[{"name":"self"}],"output":{"name":"stringrecords"}}],[11,"headers","","Returns a *copy* of the first record in the CSV data as strings.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"has_headers","","Whether to treat the first row as a special header row.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"flexible","","Whether to allow flexible length records when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"record_terminator","","Set the record terminator to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"reader"}}],[11,"quote","","Set the quote character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"escape","","Set the escape character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"reader"}}],[11,"double_quote","","Enable double quote escapes.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"ascii","","A convenience method for reading ASCII delimited text.",9,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter_result","","Transform NextField into an iterator result.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_end","","Returns true if and only if the end of CSV data has been reached.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Returns the underlying field data.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"byte_headers","","This is just like `headers`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"byte_records","","This is just like `records`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"name":"byterecords"}}],[11,"done","","Returns `true` if the CSV parser has reached its final state. When this method returns `true`, all iterators will always return `None`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_bytes","","An iterator over fields in the current record.",9,{"inputs":[{"name":"self"}],"output":{"name":"nextfield"}}],[11,"next_str","","This is just like `next_bytes` except it converts each field to a Unicode string in place.",9,{"inputs":[{"name":"self"}],"output":{"name":"nextfield"}}],[11,"byte_offset","","Returns the byte offset at which the current record started.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"seek","","Seeks the underlying reader to the file cursor specified.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"quotestyle"}}],[11,"from_file","","Creates a new `Writer` that writes CSV data to the file path given.",13,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_writer","","Creates a new CSV writer that writes to the `io::Write` given.",13,{"inputs":[{"name":"w"}],"output":{"name":"writer"}}],[11,"from_buffer","","Creates a new CSV writer that writes to the buffer given.",13,{"inputs":[{"name":"bufwriter"}],"output":{"name":"writer"}}],[11,"from_memory","","Creates a new CSV writer that writes to an in memory buffer. At any time, `as_string` or `as_bytes` can be called to retrieve the cumulative CSV data.",13,{"inputs":[],"output":{"name":"writer"}}],[11,"as_string","","Returns the written CSV data as a string.",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_bytes","","Returns the encoded CSV data as raw bytes.",13,null],[11,"into_string","","Convert the Writer into a string of written CSV data",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_bytes","","Convert the Writer into a vector of encoded CSV bytes.",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"encode","","Writes a record by encoding any `Encodable` value.",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"write","","Writes a record of strings (Unicode or raw bytes).",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"flush","","Flushes the underlying buffer.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"flexible","","Whether to allow flexible length records when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[11,"record_terminator","","Sets the record terminator to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"writer"}}],[11,"quote_style","","Set the quoting style to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"quotestyle"}],"output":{"name":"writer"}}],[11,"quote","","Set the quote character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"escape","","Set the escape character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"double_quote","","Set the quoting escape mechanism.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[6,"Result","","A convenience type for representing the result of most CSV reader/writer operations.",null,null],[6,"ByteString","","A convenience type for referring to a plain byte string.",null,null],[8,"BorrowBytes","","A trait that permits borrowing byte vectors.",null,null],[10,"borrow_bytes","","Borrow a byte vector.",14,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"locatableerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"borrow_bytes","","",15,null]],"paths":[[3,"LocatableError"],[4,"NextField"],[4,"RecordTerminator"],[4,"QuoteStyle"],[4,"Error"],[4,"ParseError"],[3,"Indexed"],[3,"Encoded"],[3,"Decoded"],[3,"Reader"],[3,"DecodedRecords"],[3,"StringRecords"],[3,"ByteRecords"],[3,"Writer"],[8,"BorrowBytes"],[6,"ByteString"]]};
searchIndex["custom_derive"] = {"doc":"**Note**: This crate has been superseded by `macro-attr`.","items":[],"paths":[]};
searchIndex["either"] = {"doc":"The enum **Either**.","items":[[4,"Either","either","`Either` represents an alternative holding one value out of either of the two possible values.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","*Unicode IDNA Compatibility Processing* (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["ieee754"] = {"doc":"Low-level manipulations of IEEE754 floating-point numbers.","items":[[3,"Iter","ieee754","An iterator over floating point numbers.",null,null],[8,"Ieee754","","Types that are IEEE754 floating point numbers.",null,null],[10,"upto","","Iterate over each value of `T` in `[self, lim]`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"iter"}}],[16,"Bits","","A type that represents the raw bits of `Self`.",0,null],[16,"Exponent","","A type large enough to store the exponent of `Self`.",0,null],[16,"Signif","","A type large enough to store the significand of `Self`.",0,null],[10,"next","","Return the next value after `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"prev","","Return the previous value before `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"bits","","View `self` as a collection of bits.",0,null],[10,"from_bits","","View a collections of bits as a floating point number.",0,null],[10,"exponent_bias","","Get the bias of the stored exponent.",0,null],[10,"decompose","","Break `self` into the three constituent parts of an IEEE754 float.",0,null],[10,"recompose","","Create a `Self` out of the three constituent parts of an IEEE754 float.",0,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Ieee754"],[3,"Iter"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","`Either` represents an alternative holding one value out of either of the two possible values.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"kmergeby"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces *n* repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",38,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",40,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",45,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools::structs","",50,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"new","","Deprecated: renamed to multizip",50,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both run out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an *iterable* that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an *iterable* that can chunk the iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"chunks_lazy","","",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",52,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",52,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",52,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",52,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",52,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_default","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"extend","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref_mut","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",0,null],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["itertools_num"] = {"doc":"","items":[[5,"linspace","itertools_num","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[0,"structs","","The concrete iterator structs.",null,null],[3,"Cumsum","itertools_num::structs","",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[8,"ItertoolsNum","itertools_num","Extension trait for iterators: extra adaptors and methods for numerical iterators",null,null],[11,"cumsum","","Return an iterator that produces the sequence of cumulative sums of the base iterator. The type of the sum is `S`.",0,{"inputs":[{"name":"self"}],"output":{"name":"cumsum"}}],[11,"clone","itertools_num::structs","",1,{"inputs":[{"name":"self"}],"output":{"name":"linspace"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cumsum","itertools_num","Return an iterator that produces the sequence of cumulative sums of the base iterator. The type of the sum is `S`.",0,{"inputs":[{"name":"self"}],"output":{"name":"cumsum"}}],[11,"next","itertools_num::structs","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null]],"paths":[[8,"ItertoolsNum"],[3,"Linspace"],[3,"Cumsum"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static","lazy_static","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","",null,null],[14,"_matches_tt_as_expr_hack","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null],[14,"assert_matches","","",null,null],[14,"debug_assert_matches","","",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["nalgebra"] = {"doc":"nalgebra","items":[[3,"Identity","nalgebra","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMatrix","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DMatrix1","","A stack-allocated dynamically sized matrix with at most one row and column.",null,null],[3,"DMatrix2","","A stack-allocated dynamically sized square or rectangular matrix with at most 2 rows and columns.",null,null],[3,"DMatrix3","","A stack-allocated dynamically sized square or rectangular matrix with at most 3 rows and columns.",null,null],[3,"DMatrix4","","A stack-allocated dynamically sized square or rectangular matrix with at most 4 rows and columns.",null,null],[3,"DMatrix5","","A stack-allocated dynamically sized square or rectangular matrix with at most 5 rows and columns.",null,null],[3,"DMatrix6","","A stack-allocated dynamically sized square or rectangular matrix with at most 6 rows and columns.",null,null],[3,"DVector","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVector1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVector2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVector3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVector4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVector5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVector6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Isometry2","","Two dimensional **direct** isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Isometry3","","Three dimensional **direct** isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Similarity2","","A two-dimensional similarity transformation.",null,null],[12,"isometry","","The isometry applicable by this similarity transformation.",3,null],[3,"Similarity3","","A three-dimensional similarity transformation.",null,null],[12,"isometry","","The isometry applicable by this similarity transformation.",4,null],[3,"Matrix1","","Square matrix of dimension 1.",null,null],[12,"m11","","",5,null],[3,"Matrix2","","Square matrix of dimension 2.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[3,"Matrix3","","Square matrix of dimension 3.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[3,"Matrix4","","Square matrix of dimension 4.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[3,"Matrix5","","Square matrix of dimension 5.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[3,"Matrix6","","Square matrix of dimension 6.",null,null],[12,"m11","","",10,null],[12,"m21","","",10,null],[12,"m31","","",10,null],[12,"m41","","",10,null],[12,"m51","","",10,null],[12,"m61","","",10,null],[12,"m12","","",10,null],[12,"m22","","",10,null],[12,"m32","","",10,null],[12,"m42","","",10,null],[12,"m52","","",10,null],[12,"m62","","",10,null],[12,"m13","","",10,null],[12,"m23","","",10,null],[12,"m33","","",10,null],[12,"m43","","",10,null],[12,"m53","","",10,null],[12,"m63","","",10,null],[12,"m14","","",10,null],[12,"m24","","",10,null],[12,"m34","","",10,null],[12,"m44","","",10,null],[12,"m54","","",10,null],[12,"m64","","",10,null],[12,"m15","","",10,null],[12,"m25","","",10,null],[12,"m35","","",10,null],[12,"m45","","",10,null],[12,"m55","","",10,null],[12,"m65","","",10,null],[12,"m16","","",10,null],[12,"m26","","",10,null],[12,"m36","","",10,null],[12,"m46","","",10,null],[12,"m56","","",10,null],[12,"m66","","",10,null],[3,"Rotation2","","Two dimensional rotation matrix.",null,null],[3,"Rotation3","","Three dimensional rotation matrix.",null,null],[3,"Vector1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",11,null],[3,"Vector2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[3,"Vector3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[3,"Vector4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[3,"Vector5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[3,"Vector6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",16,null],[12,"y","","Second component of the vector.",16,null],[12,"z","","Third component of the vector.",16,null],[12,"w","","Fourth component of the vector.",16,null],[12,"a","","Fifth of the vector.",16,null],[12,"b","","Sixth component of the vector.",16,null],[3,"Point1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",17,null],[3,"Point2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",18,null],[12,"y","","Second component of the point.",18,null],[3,"Point3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[12,"z","","Third component of the point.",19,null],[3,"Point4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[12,"w","","Fourth component of the point.",20,null],[3,"Point5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[12,"a","","Fifth of the point.",21,null],[3,"Point6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",22,null],[12,"y","","Second component of the point.",22,null],[12,"z","","Third component of the point.",22,null],[12,"w","","Fourth component of the point.",22,null],[12,"a","","Fifth of the point.",22,null],[12,"b","","Sixth component of the point.",22,null],[3,"Perspective3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspectiveMatrix3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Orthographic3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthographicMatrix3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quaternion","","A quaternion. See the `UnitQuaternion` type alias for a quaternion that can be used as a rotation.",null,null],[12,"w","","The scalar component of the quaternion.",23,null],[12,"i","","The first vector component of the quaternion.",23,null],[12,"j","","The second vector component of the quaternion.",23,null],[12,"k","","The third vector component of the quaternion.",23,null],[3,"Unit","","A wrapper that ensures the undelying algebraic entity has a unit norm.",null,null],[4,"PartialOrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",24,null],[13,"PartialEqual","","Equality relationship.",24,null],[13,"PartialGreater","","Result of a strict comparison.",24,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",24,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane defined by `vector`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"hessenberg","","Hessenberg Returns the matrix m in Hessenberg form and the corresponding similarity transformation",null,null],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"partialordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"origin","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"distance","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"distance_squared","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inverse_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inverse_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inverse_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inverse_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"angle_between","","Computes the angle of the rotation needed to transfom `a` to `b`.",null,null],[5,"rotation_between","","Computes the rotation needed to transform `a` to `b`.",null,null],[5,"to_rotation_matrix","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inverse_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inverse_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,null],[5,"norm_squared","","Computes the squared L2 norm of a vector.",null,null],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"try_normalize","","Gets the normalized version of a vector or `None` if its norm is smaller than `min_norm`.",null,null],[5,"determinant","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,null],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross product.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inverse","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,null],[5,"covariance","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"repeat","","Create an object by repeating a value.",null,{"inputs":[{"name":"n"}],"output":{"name":"t"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diagonal","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dimension","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix"}}],[11,"new_uninitialized","","Creates an uninitialized matrix.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"from_element","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in row-major order. Note that `from_column_vector` is much faster than `from_row_vector` since a `DMatrix` stores its data in column-major order.",25,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in column-major order. Note that `from_column_vector` is much faster than `from_row_vector` since a `DMatrix` stores its data in column-major order.",25,null],[11,"from_row_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator. The source contains the matrix data in row-major order. Note that `from_column_iter` is much faster than `from_row_iter` since a `DMatrix` stores its data in column-major order.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmatrix"}}],[11,"from_column_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator. The source contains the matrix data in column-major order. Note that `from_column_iter` is much faster than `from_row_iter` since a `DMatrix` stores its data in column-major order.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmatrix"}}],[11,"from_fn","","Builds a matrix filled with the results of a function applied to each of its component coordinates.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix"}}],[11,"into_vector","","Transforms this matrix into an array. This consumes the matrix and is O(1). The returned vector contains the matrix data in column-major order.",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Set this matrix components to zero.",25,{"inputs":[{"name":"self"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"nrows","","The number of row on the matrix.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_vector","","Gets a reference to this matrix data. The returned vector contains the matrix data in column-major order.",25,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data. The returned vector contains the matrix data in column-major order.",25,null],[11,"new_identity","","Builds an identity matrix.",25,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",25,null],[11,"unsafe_at","","Just like `at` without bounds checking.",25,null],[11,"swap","","",25,null],[11,"shape","","",25,null],[11,"index","","",25,null],[11,"index_mut","","",25,null],[11,"mul","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dmatrix"}}],[11,"mul","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dmatrix"}}],[11,"mul_assign","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"mul_assign","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"mul","","",25,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"dvector"}}],[11,"mul","","",25,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"dvector"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dvector"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dvector"}}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"add","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dmatrix"}}],[11,"add","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dmatrix"}}],[11,"add_assign","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"add_assign","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"sub","","",25,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"sub_assign","","",25,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dmatrix"}}],[11,"sub","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":{"name":"dmatrix"}}],[11,"sub_assign","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"sub_assign","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"}],"output":null}],[11,"inverse","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"transpose","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix"}}],[11,"transpose_mut","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"mean","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dvector"}}],[11,"covariance","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix"}}],[11,"ncols","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector"}],"output":null}],[11,"column","","",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector"}}],[11,"column_slice","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector"}}],[11,"nrows","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector"}],"output":null}],[11,"row","","",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector"}}],[11,"row_slice","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector"}}],[11,"from_diagonal","","",25,{"inputs":[{"name":"dvector"}],"output":{"name":"dmatrix"}}],[11,"diagonal","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dvector"}}],[11,"approx_epsilon","","",25,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",25,{"inputs":[{"name":"self"},{"name":"dmatrix"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",25,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"div","","",25,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"add","","",25,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix1"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Set this matrix components to zero.",26,{"inputs":[{"name":"self"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"nrows","","The number of row on the matrix.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_vector","","Gets a reference to this matrix data. The returned vector contains the matrix data in column-major order.",26,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data. The returned vector contains the matrix data in column-major order.",26,null],[11,"new_identity","","Builds an identity matrix.",26,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",26,null],[11,"unsafe_at","","Just like `at` without bounds checking.",26,null],[11,"swap","","",26,null],[11,"shape","","",26,null],[11,"index","","",26,null],[11,"index_mut","","",26,null],[11,"mul","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dmatrix1"}}],[11,"mul","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dmatrix1"}}],[11,"mul_assign","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"mul_assign","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"mul","","",26,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"dvector1"}}],[11,"mul","","",26,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"dvector1"}}],[11,"mul","","",27,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dvector1"}}],[11,"mul","","",27,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dvector1"}}],[11,"mul_assign","","",27,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"mul_assign","","",27,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"add","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dmatrix1"}}],[11,"add","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dmatrix1"}}],[11,"add_assign","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"add_assign","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"sub","","",26,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix1"}}],[11,"sub_assign","","",26,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dmatrix1"}}],[11,"sub","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":{"name":"dmatrix1"}}],[11,"sub_assign","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"sub_assign","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"}],"output":null}],[11,"inverse","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"transpose","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix1"}}],[11,"transpose_mut","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"mean","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dvector1"}}],[11,"covariance","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix1"}}],[11,"ncols","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector1"}],"output":null}],[11,"column","","",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"column_slice","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"nrows","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector1"}],"output":null}],[11,"row","","",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"row_slice","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"from_diagonal","","",26,{"inputs":[{"name":"dvector1"}],"output":{"name":"dmatrix1"}}],[11,"diagonal","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dvector1"}}],[11,"approx_epsilon","","",26,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",26,{"inputs":[{"name":"self"},{"name":"dmatrix1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",26,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix1"}}],[11,"div","","",26,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix1"}}],[11,"add","","",26,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix1"}}],[11,"from_element","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix1"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in row-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",26,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in column-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",26,null],[11,"from_fn","","Builds a matrix using an initialization function.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix1"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix2"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Set this matrix components to zero.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"nrows","","The number of row on the matrix.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_vector","","Gets a reference to this matrix data. The returned vector contains the matrix data in column-major order.",28,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data. The returned vector contains the matrix data in column-major order.",28,null],[11,"new_identity","","Builds an identity matrix.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",28,null],[11,"unsafe_at","","Just like `at` without bounds checking.",28,null],[11,"swap","","",28,null],[11,"shape","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"mul","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dmatrix2"}}],[11,"mul","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dmatrix2"}}],[11,"mul_assign","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"mul_assign","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"mul","","",28,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"dvector2"}}],[11,"mul","","",28,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"dvector2"}}],[11,"mul","","",29,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dvector2"}}],[11,"mul","","",29,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dvector2"}}],[11,"mul_assign","","",29,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"mul_assign","","",29,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"add","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dmatrix2"}}],[11,"add","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dmatrix2"}}],[11,"add_assign","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"add_assign","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"sub","","",28,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix2"}}],[11,"sub_assign","","",28,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dmatrix2"}}],[11,"sub","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":{"name":"dmatrix2"}}],[11,"sub_assign","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"sub_assign","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"}],"output":null}],[11,"inverse","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"transpose","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix2"}}],[11,"transpose_mut","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"mean","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dvector2"}}],[11,"covariance","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix2"}}],[11,"ncols","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector2"}],"output":null}],[11,"column","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"column_slice","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"nrows","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector2"}],"output":null}],[11,"row","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"row_slice","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"from_diagonal","","",28,{"inputs":[{"name":"dvector2"}],"output":{"name":"dmatrix2"}}],[11,"diagonal","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dvector2"}}],[11,"approx_epsilon","","",28,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",28,{"inputs":[{"name":"self"},{"name":"dmatrix2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",28,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix2"}}],[11,"div","","",28,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix2"}}],[11,"add","","",28,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix2"}}],[11,"from_element","","Builds a matrix filled with a given constant.",28,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix2"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in row-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",28,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in column-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",28,null],[11,"from_fn","","Builds a matrix using an initialization function.",28,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix2"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix3"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Set this matrix components to zero.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"nrows","","The number of row on the matrix.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_vector","","Gets a reference to this matrix data. The returned vector contains the matrix data in column-major order.",30,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data. The returned vector contains the matrix data in column-major order.",30,null],[11,"new_identity","","Builds an identity matrix.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",30,null],[11,"unsafe_at","","Just like `at` without bounds checking.",30,null],[11,"swap","","",30,null],[11,"shape","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"mul","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dmatrix3"}}],[11,"mul","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dmatrix3"}}],[11,"mul_assign","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"mul_assign","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"mul","","",30,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"dvector3"}}],[11,"mul","","",30,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"dvector3"}}],[11,"mul","","",31,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dvector3"}}],[11,"mul","","",31,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dvector3"}}],[11,"mul_assign","","",31,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"mul_assign","","",31,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"add","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dmatrix3"}}],[11,"add","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dmatrix3"}}],[11,"add_assign","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"add_assign","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"sub","","",30,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix3"}}],[11,"sub_assign","","",30,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dmatrix3"}}],[11,"sub","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":{"name":"dmatrix3"}}],[11,"sub_assign","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"sub_assign","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"}],"output":null}],[11,"inverse","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"transpose","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix3"}}],[11,"transpose_mut","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"mean","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dvector3"}}],[11,"covariance","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix3"}}],[11,"ncols","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector3"}],"output":null}],[11,"column","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"column_slice","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"nrows","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector3"}],"output":null}],[11,"row","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"row_slice","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"from_diagonal","","",30,{"inputs":[{"name":"dvector3"}],"output":{"name":"dmatrix3"}}],[11,"diagonal","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dvector3"}}],[11,"approx_epsilon","","",30,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",30,{"inputs":[{"name":"self"},{"name":"dmatrix3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",30,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix3"}}],[11,"div","","",30,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix3"}}],[11,"add","","",30,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix3"}}],[11,"from_element","","Builds a matrix filled with a given constant.",30,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix3"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in row-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",30,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in column-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",30,null],[11,"from_fn","","Builds a matrix using an initialization function.",30,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix3"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix4"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Set this matrix components to zero.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"nrows","","The number of row on the matrix.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_vector","","Gets a reference to this matrix data. The returned vector contains the matrix data in column-major order.",32,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data. The returned vector contains the matrix data in column-major order.",32,null],[11,"new_identity","","Builds an identity matrix.",32,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",32,null],[11,"unsafe_at","","Just like `at` without bounds checking.",32,null],[11,"swap","","",32,null],[11,"shape","","",32,null],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dmatrix4"}}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dmatrix4"}}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"dvector4"}}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"dvector4"}}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dvector4"}}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dvector4"}}],[11,"mul_assign","","",33,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"mul_assign","","",33,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dmatrix4"}}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dmatrix4"}}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix4"}}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dmatrix4"}}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":{"name":"dmatrix4"}}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"}],"output":null}],[11,"inverse","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"transpose","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix4"}}],[11,"transpose_mut","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"mean","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dvector4"}}],[11,"covariance","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix4"}}],[11,"ncols","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector4"}],"output":null}],[11,"column","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"column_slice","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"nrows","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector4"}],"output":null}],[11,"row","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"row_slice","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"from_diagonal","","",32,{"inputs":[{"name":"dvector4"}],"output":{"name":"dmatrix4"}}],[11,"diagonal","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dvector4"}}],[11,"approx_epsilon","","",32,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",32,{"inputs":[{"name":"self"},{"name":"dmatrix4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix4"}}],[11,"div","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix4"}}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix4"}}],[11,"from_element","","Builds a matrix filled with a given constant.",32,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix4"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in row-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",32,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in column-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",32,null],[11,"from_fn","","Builds a matrix using an initialization function.",32,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix4"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix5"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Set this matrix components to zero.",34,{"inputs":[{"name":"self"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"nrows","","The number of row on the matrix.",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_vector","","Gets a reference to this matrix data. The returned vector contains the matrix data in column-major order.",34,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data. The returned vector contains the matrix data in column-major order.",34,null],[11,"new_identity","","Builds an identity matrix.",34,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",34,null],[11,"unsafe_at","","Just like `at` without bounds checking.",34,null],[11,"swap","","",34,null],[11,"shape","","",34,null],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dmatrix5"}}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dmatrix5"}}],[11,"mul_assign","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"mul_assign","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"dvector5"}}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"dvector5"}}],[11,"mul","","",35,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dvector5"}}],[11,"mul","","",35,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dvector5"}}],[11,"mul_assign","","",35,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"mul_assign","","",35,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"add","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dmatrix5"}}],[11,"add","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dmatrix5"}}],[11,"add_assign","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"add_assign","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"sub","","",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix5"}}],[11,"sub_assign","","",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dmatrix5"}}],[11,"sub","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":{"name":"dmatrix5"}}],[11,"sub_assign","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"sub_assign","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"}],"output":null}],[11,"inverse","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"transpose","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix5"}}],[11,"transpose_mut","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"mean","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dvector5"}}],[11,"covariance","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix5"}}],[11,"ncols","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector5"}],"output":null}],[11,"column","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"column_slice","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"nrows","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector5"}],"output":null}],[11,"row","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"row_slice","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"from_diagonal","","",34,{"inputs":[{"name":"dvector5"}],"output":{"name":"dmatrix5"}}],[11,"diagonal","","",34,{"inputs":[{"name":"self"}],"output":{"name":"dvector5"}}],[11,"approx_epsilon","","",34,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",34,{"inputs":[{"name":"self"},{"name":"dmatrix5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix5"}}],[11,"div","","",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix5"}}],[11,"add","","",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix5"}}],[11,"from_element","","Builds a matrix filled with a given constant.",34,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix5"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in row-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",34,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in column-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",34,null],[11,"from_fn","","Builds a matrix using an initialization function.",34,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix5"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix6"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Set this matrix components to zero.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"nrows","","The number of row on the matrix.",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_vector","","Gets a reference to this matrix data. The returned vector contains the matrix data in column-major order.",36,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data. The returned vector contains the matrix data in column-major order.",36,null],[11,"new_identity","","Builds an identity matrix.",36,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",36,null],[11,"unsafe_at","","Just like `at` without bounds checking.",36,null],[11,"swap","","",36,null],[11,"shape","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dmatrix6"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dmatrix6"}}],[11,"mul_assign","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"mul_assign","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"dvector6"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"dvector6"}}],[11,"mul","","",37,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dvector6"}}],[11,"mul","","",37,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dvector6"}}],[11,"mul_assign","","",37,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"mul_assign","","",37,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dmatrix6"}}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dmatrix6"}}],[11,"add_assign","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"add_assign","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix6"}}],[11,"sub_assign","","",36,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dmatrix6"}}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":{"name":"dmatrix6"}}],[11,"sub_assign","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"sub_assign","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"}],"output":null}],[11,"inverse","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"transpose","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix6"}}],[11,"transpose_mut","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"mean","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dvector6"}}],[11,"covariance","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dmatrix6"}}],[11,"ncols","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector6"}],"output":null}],[11,"column","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"column_slice","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"nrows","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"dvector6"}],"output":null}],[11,"row","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"row_slice","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"from_diagonal","","",36,{"inputs":[{"name":"dvector6"}],"output":{"name":"dmatrix6"}}],[11,"diagonal","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dvector6"}}],[11,"approx_epsilon","","",36,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",36,{"inputs":[{"name":"self"},{"name":"dmatrix6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix6"}}],[11,"div","","",36,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix6"}}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dmatrix6"}}],[11,"from_element","","Builds a matrix filled with a given constant.",36,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix6"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in row-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",36,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector. The vector contains the matrix data in column-major order. Note that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data in column-major order.",36,null],[11,"from_fn","","Builds a matrix using an initialization function.",36,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix6"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dvector"}}],[11,"new_uninitialized","","Creates an uninitialized vector.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"from_element","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector"}}],[11,"len","","The vector length.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"dvector"}}],[11,"outer","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"dmatrix"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"shape","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"axpy","","",0,{"inputs":[{"name":"self"},{"name":"n"},{"name":"dvector"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"dvector"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector"}}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"dvector"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector"}}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"dvector"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector"}}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"dvector"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector"}}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dvector"}}],[11,"dot","","",0,{"inputs":[{"name":"self"},{"name":"dvector"}],"output":{"name":"n"}}],[11,"norm_squared","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dvector"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mean","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",0,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,{"inputs":[{"name":"self"},{"name":"dvector"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",0,{"inputs":[{"name":"self"},{"name":"dvector"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of vectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal to 1.0.",0,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension `n`, this will return `n - 1` vectors.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",27,null],[11,"as_mut","","",27,null],[11,"shape","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",27,null],[11,"index_mut","","",27,null],[11,"iter","","",27,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"axpy","","",27,{"inputs":[{"name":"self"},{"name":"n"},{"name":"dvector1"}],"output":null}],[11,"mul","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"dvector1"}}],[11,"mul","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector1"}}],[11,"mul_assign","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":null}],[11,"mul_assign","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"dvector1"}}],[11,"div","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector1"}}],[11,"div_assign","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":null}],[11,"div_assign","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"dvector1"}}],[11,"add","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector1"}}],[11,"add_assign","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":null}],[11,"add_assign","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"dvector1"}}],[11,"sub","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector1"}}],[11,"sub_assign","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":null}],[11,"sub_assign","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",27,{"inputs":[{"name":"self"}],"output":{"name":"dvector1"}}],[11,"dot","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"n"}}],[11,"norm_squared","","",27,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",27,{"inputs":[{"name":"self"}],"output":{"name":"dvector1"}}],[11,"normalize_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mean","","",27,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",27,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"new_zeros","","Builds a vector filled with zeros.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"new_ones","","Builds a vector filled with ones.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"new_random","","Builds a vector filled with random values.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of vectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal to 1.0.",27,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension `n`, this will return `n - 1` vectors.",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","The number of elements of this vector.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"dvector1"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"dvector1"}}],[11,"from_element","","Builds a vector filled with a constant.",27,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",27,null],[11,"from_fn","","Builds a vector filled with the result of a function.",27,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector1"}}],[11,"from_iter","","",27,{"inputs":[{"name":"i"}],"output":{"name":"dvector1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",29,null],[11,"as_mut","","",29,null],[11,"shape","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",29,null],[11,"index_mut","","",29,null],[11,"iter","","",29,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"axpy","","",29,{"inputs":[{"name":"self"},{"name":"n"},{"name":"dvector2"}],"output":null}],[11,"mul","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"dvector2"}}],[11,"mul","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector2"}}],[11,"mul_assign","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":null}],[11,"mul_assign","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"dvector2"}}],[11,"div","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector2"}}],[11,"div_assign","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":null}],[11,"div_assign","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"dvector2"}}],[11,"add","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector2"}}],[11,"add_assign","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":null}],[11,"add_assign","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"dvector2"}}],[11,"sub","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector2"}}],[11,"sub_assign","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":null}],[11,"sub_assign","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",29,{"inputs":[{"name":"self"}],"output":{"name":"dvector2"}}],[11,"dot","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"n"}}],[11,"norm_squared","","",29,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",29,{"inputs":[{"name":"self"}],"output":{"name":"dvector2"}}],[11,"normalize_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",29,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mean","","",29,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",29,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"new_zeros","","Builds a vector filled with zeros.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"new_ones","","Builds a vector filled with ones.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"new_random","","Builds a vector filled with random values.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of vectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal to 1.0.",29,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension `n`, this will return `n - 1` vectors.",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","The number of elements of this vector.",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"dvector2"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"dvector2"}}],[11,"from_element","","Builds a vector filled with a constant.",29,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",29,null],[11,"from_fn","","Builds a vector filled with the result of a function.",29,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector2"}}],[11,"from_iter","","",29,{"inputs":[{"name":"i"}],"output":{"name":"dvector2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",31,null],[11,"as_mut","","",31,null],[11,"shape","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"iter","","",31,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"axpy","","",31,{"inputs":[{"name":"self"},{"name":"n"},{"name":"dvector3"}],"output":null}],[11,"mul","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"dvector3"}}],[11,"mul","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector3"}}],[11,"mul_assign","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":null}],[11,"mul_assign","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"dvector3"}}],[11,"div","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector3"}}],[11,"div_assign","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":null}],[11,"div_assign","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"dvector3"}}],[11,"add","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector3"}}],[11,"add_assign","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":null}],[11,"add_assign","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"dvector3"}}],[11,"sub","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector3"}}],[11,"sub_assign","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":null}],[11,"sub_assign","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dvector3"}}],[11,"dot","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"n"}}],[11,"norm_squared","","",31,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dvector3"}}],[11,"normalize_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",31,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mean","","",31,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",31,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",31,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"new_zeros","","Builds a vector filled with zeros.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"new_ones","","Builds a vector filled with ones.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"new_random","","Builds a vector filled with random values.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of vectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal to 1.0.",31,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension `n`, this will return `n - 1` vectors.",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","The number of elements of this vector.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"dvector3"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dvector3"}}],[11,"from_element","","Builds a vector filled with a constant.",31,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",31,null],[11,"from_fn","","Builds a vector filled with the result of a function.",31,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector3"}}],[11,"from_iter","","",31,{"inputs":[{"name":"i"}],"output":{"name":"dvector3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",33,null],[11,"as_mut","","",33,null],[11,"shape","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",33,null],[11,"index_mut","","",33,null],[11,"iter","","",33,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"axpy","","",33,{"inputs":[{"name":"self"},{"name":"n"},{"name":"dvector4"}],"output":null}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"dvector4"}}],[11,"mul","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector4"}}],[11,"mul_assign","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":null}],[11,"mul_assign","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"dvector4"}}],[11,"div","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector4"}}],[11,"div_assign","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":null}],[11,"div_assign","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"dvector4"}}],[11,"add","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector4"}}],[11,"add_assign","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":null}],[11,"add_assign","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"dvector4"}}],[11,"sub","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector4"}}],[11,"sub_assign","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":null}],[11,"sub_assign","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dvector4"}}],[11,"dot","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"n"}}],[11,"norm_squared","","",33,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dvector4"}}],[11,"normalize_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",33,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mean","","",33,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",33,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"new_zeros","","Builds a vector filled with zeros.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"new_ones","","Builds a vector filled with ones.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"new_random","","Builds a vector filled with random values.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of vectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal to 1.0.",33,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension `n`, this will return `n - 1` vectors.",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","The number of elements of this vector.",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"dvector4"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dvector4"}}],[11,"from_element","","Builds a vector filled with a constant.",33,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",33,null],[11,"from_fn","","Builds a vector filled with the result of a function.",33,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector4"}}],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"dvector4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",35,null],[11,"as_mut","","",35,null],[11,"shape","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",35,null],[11,"index_mut","","",35,null],[11,"iter","","",35,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"axpy","","",35,{"inputs":[{"name":"self"},{"name":"n"},{"name":"dvector5"}],"output":null}],[11,"mul","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"dvector5"}}],[11,"mul","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector5"}}],[11,"mul_assign","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":null}],[11,"mul_assign","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"dvector5"}}],[11,"div","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector5"}}],[11,"div_assign","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":null}],[11,"div_assign","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"dvector5"}}],[11,"add","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector5"}}],[11,"add_assign","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":null}],[11,"add_assign","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"dvector5"}}],[11,"sub","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector5"}}],[11,"sub_assign","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":null}],[11,"sub_assign","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dvector5"}}],[11,"dot","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"n"}}],[11,"norm_squared","","",35,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dvector5"}}],[11,"normalize_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",35,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mean","","",35,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",35,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"new_zeros","","Builds a vector filled with zeros.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"new_ones","","Builds a vector filled with ones.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"new_random","","Builds a vector filled with random values.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of vectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal to 1.0.",35,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension `n`, this will return `n - 1` vectors.",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","The number of elements of this vector.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"dvector5"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dvector5"}}],[11,"from_element","","Builds a vector filled with a constant.",35,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",35,null],[11,"from_fn","","Builds a vector filled with the result of a function.",35,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector5"}}],[11,"from_iter","","",35,{"inputs":[{"name":"i"}],"output":{"name":"dvector5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",37,null],[11,"as_mut","","",37,null],[11,"shape","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",37,null],[11,"index_mut","","",37,null],[11,"iter","","",37,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"axpy","","",37,{"inputs":[{"name":"self"},{"name":"n"},{"name":"dvector6"}],"output":null}],[11,"mul","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"dvector6"}}],[11,"mul","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector6"}}],[11,"mul_assign","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":null}],[11,"mul_assign","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"dvector6"}}],[11,"div","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector6"}}],[11,"div_assign","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":null}],[11,"div_assign","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"dvector6"}}],[11,"add","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector6"}}],[11,"add_assign","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":null}],[11,"add_assign","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"dvector6"}}],[11,"sub","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"dvector6"}}],[11,"sub_assign","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":null}],[11,"sub_assign","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dvector6"}}],[11,"dot","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"n"}}],[11,"norm_squared","","",37,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dvector6"}}],[11,"normalize_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",37,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mean","","",37,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",37,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"new_zeros","","Builds a vector filled with zeros.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"new_ones","","Builds a vector filled with ones.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"new_random","","Builds a vector filled with random values.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of vectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal to 1.0.",37,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension `n`, this will return `n - 1` vectors.",37,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","The number of elements of this vector.",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"dvector6"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dvector6"}}],[11,"from_element","","Builds a vector filled with a constant.",37,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",37,null],[11,"from_fn","","Builds a vector filled with the result of a function.",37,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector6"}}],[11,"from_iter","","",37,{"inputs":[{"name":"i"}],"output":{"name":"dvector6"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"div_assign","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"zero","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"is_zero","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"abs","","",11,{"inputs":[{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"x","","Create the element of the canonical basis having this component set to one and all the others set to zero.",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"dot","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"n"}}],[11,"norm_squared","","",11,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"normalize_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"inverse_translation","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"append_translation_mut","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"append_translation","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"prepend_translation_mut","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"prepend_translation","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"set_translation","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"translate","","",11,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"point1"}}],[11,"inverse_translate","","",11,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"point1"}}],[11,"rotate","","",11,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",11,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",17,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",17,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",11,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"point1"}}],[11,"inverse_transform","","",11,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"point1"}}],[11,"to_point","","Converts this vector to a point.",11,{"inputs":[{"name":"self"}],"output":{"name":"point1"}}],[11,"as_point","","Reinterprets this vector as a point.",11,{"inputs":[{"name":"self"}],"output":{"name":"point1"}}],[11,"mean","","",11,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"repeat","","",11,{"inputs":[{"name":"n"}],"output":{"name":"vector1"}}],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"vector1"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"div_assign","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"div","","",11,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector1"}}],[11,"new","","Creation from component values.",11,{"inputs":[{"name":"n"}],"output":{"name":"vector1"}}],[11,"inf","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"sup","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"partial_le","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"from","","",11,{"inputs":[{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"approx_epsilon","","",11,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"self"},{"name":"vector1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",11,{"inputs":[{"name":"self"},{"name":"vector1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",11,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector1"}],"output":null}],[11,"max_value","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"min_value","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"len","","The dimension of this entity.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"from","","",11,null],[11,"dimension","","",11,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"iter","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",11,{"inputs":[{"name":"i"}],"output":{"name":"vector1"}}],[11,"to_homogeneous","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"from","","",11,{"inputs":[{"name":"vector2"}],"output":{"name":"vector1"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_assign","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_assign","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_assign","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div_assign","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"zero","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"is_zero","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"abs","","",12,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"x","","Create the element of the canonical basis having this component set to one and all the others set to zero.",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"y","","Create the element of the canonical basis having this component set to one and all the others set to zero.",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"dot","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"n"}}],[11,"norm_squared","","",12,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"normalize_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"inverse_translation","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"append_translation_mut","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"append_translation","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"prepend_translation_mut","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"prepend_translation","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"set_translation","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"translate","","",12,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_translate","","",12,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"rotate","","",12,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",12,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",18,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",18,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",12,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_transform","","",12,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"to_point","","Converts this vector to a point.",12,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"as_point","","Reinterprets this vector as a point.",12,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"mean","","",12,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"repeat","","",12,{"inputs":[{"name":"n"}],"output":{"name":"vector2"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"vector2"}}],[11,"add_assign","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"sub_assign","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"mul_assign","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"div_assign","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"new","","Creation from component values.",12,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"inf","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sup","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"partial_le","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"from","","",12,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"approx_epsilon","","",12,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"self"},{"name":"vector2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",12,{"inputs":[{"name":"self"},{"name":"vector2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",12,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector2"}],"output":null}],[11,"max_value","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"min_value","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"len","","The dimension of this entity.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"from","","",12,null],[11,"dimension","","",12,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"iter","","",12,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",12,{"inputs":[{"name":"i"}],"output":{"name":"vector2"}}],[11,"to_homogeneous","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"from","","",12,{"inputs":[{"name":"vector3"}],"output":{"name":"vector2"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_assign","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_assign","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_assign","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div_assign","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"is_zero","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"abs","","",13,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"x","","Create the element of the canonical basis having this component set to one and all the others set to zero.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"y","","Create the element of the canonical basis having this component set to one and all the others set to zero.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"z","","Create the element of the canonical basis having this component set to one and all the others set to zero.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"dot","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"n"}}],[11,"norm_squared","","",13,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"normalize_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"inverse_translation","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"append_translation_mut","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"append_translation","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"prepend_translation_mut","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"prepend_translation","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"set_translation","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"translate","","",13,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_translate","","",13,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"rotate","","",13,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",13,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",19,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",19,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",13,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_transform","","",13,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"to_point","","Converts this vector to a point.",13,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"as_point","","Reinterprets this vector as a point.",13,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"mean","","",13,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"repeat","","",13,{"inputs":[{"name":"n"}],"output":{"name":"vector3"}}],[11,"rand","","",13,{"inputs":[{"name":"r"}],"output":{"name":"vector3"}}],[11,"add_assign","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"sub_assign","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"mul_assign","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"div_assign","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"new","","Creation from component values.",13,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"inf","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sup","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"partial_le","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"from","","",13,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"approx_epsilon","","",13,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"self"},{"name":"vector3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",13,{"inputs":[{"name":"self"},{"name":"vector3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",13,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector3"}],"output":null}],[11,"max_value","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"min_value","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"len","","The dimension of this entity.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"dimension","","",13,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"iter","","",13,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"vector3"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"from","","",13,{"inputs":[{"name":"vector4"}],"output":{"name":"vector3"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"encode","","",14,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_assign","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_assign","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_assign","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"mul","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div_assign","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"div","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"zero","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"is_zero","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"abs","","",14,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"x","","Create the element of the canonical basis having this component set to one and all the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"y","","Create the element of the canonical basis having this component set to one and all the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"z","","Create the element of the canonical basis having this component set to one and all the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"w","","Create the element of the canonical basis having this component set to one and all the others set to zero.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"dot","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"n"}}],[11,"norm_squared","","",14,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"normalize_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"inverse_translation","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"append_translation_mut","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"append_translation","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"prepend_translation_mut","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"prepend_translation","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"set_translation","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"translate","","",14,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"point4"}}],[11,"inverse_translate","","",14,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"point4"}}],[11,"rotate","","",14,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",14,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",20,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",20,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",14,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"point4"}}],[11,"inverse_transform","","",14,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"point4"}}],[11,"to_point","","Converts this vector to a point.",14,{"inputs":[{"name":"self"}],"output":{"name":"point4"}}],[11,"as_point","","Reinterprets this vector as a point.",14,{"inputs":[{"name":"self"}],"output":{"name":"point4"}}],[11,"mean","","",14,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"repeat","","",14,{"inputs":[{"name":"n"}],"output":{"name":"vector4"}}],[11,"rand","","",14,{"inputs":[{"name":"r"}],"output":{"name":"vector4"}}],[11,"add_assign","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"add","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"sub_assign","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"mul_assign","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"mul","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"div_assign","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"div","","",14,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"new","","Creation from component values.",14,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"inf","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sup","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"partial_le","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"from","","",14,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"approx_epsilon","","",14,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",14,{"inputs":[{"name":"self"},{"name":"vector4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",14,{"inputs":[{"name":"self"},{"name":"vector4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",14,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector4"}],"output":null}],[11,"max_value","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"min_value","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"len","","The dimension of this entity.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"from","","",14,null],[11,"dimension","","",14,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"iter","","",14,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"vector4"}}],[11,"canonical_basis","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vector4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",14,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"from","","",14,{"inputs":[{"name":"vector5"}],"output":{"name":"vector4"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"bool"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"add_assign","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"sub_assign","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"mul","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"mul_assign","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"mul","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"div","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"div_assign","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"div","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"zero","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"is_zero","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"abs","","",15,{"inputs":[{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"x","","Create the element of the canonical basis having this component set to one and all the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"y","","Create the element of the canonical basis having this component set to one and all the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"z","","Create the element of the canonical basis having this component set to one and all the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"w","","Create the element of the canonical basis having this component set to one and all the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"a","","Create the element of the canonical basis having this component set to one and all the others set to zero.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"dot","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"n"}}],[11,"norm_squared","","",15,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"normalize_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"inverse_translation","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"append_translation_mut","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"append_translation","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"prepend_translation_mut","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"prepend_translation","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"set_translation","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"translate","","",15,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"point5"}}],[11,"inverse_translate","","",15,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"point5"}}],[11,"rotate","","",15,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",15,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",21,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",21,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",15,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"point5"}}],[11,"inverse_transform","","",15,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"point5"}}],[11,"to_point","","Converts this vector to a point.",15,{"inputs":[{"name":"self"}],"output":{"name":"point5"}}],[11,"as_point","","Reinterprets this vector as a point.",15,{"inputs":[{"name":"self"}],"output":{"name":"point5"}}],[11,"mean","","",15,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"repeat","","",15,{"inputs":[{"name":"n"}],"output":{"name":"vector5"}}],[11,"rand","","",15,{"inputs":[{"name":"r"}],"output":{"name":"vector5"}}],[11,"add_assign","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"add","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"sub_assign","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"sub","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"mul_assign","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"mul","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"div_assign","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"div","","",15,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"new","","Creation from component values.",15,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"inf","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"sup","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"bool"}}],[11,"partial_le","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"bool"}}],[11,"from","","",15,{"inputs":[{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"approx_epsilon","","",15,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",15,{"inputs":[{"name":"self"},{"name":"vector5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",15,{"inputs":[{"name":"self"},{"name":"vector5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",15,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector5"}],"output":null}],[11,"max_value","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"min_value","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"len","","The dimension of this entity.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"from","","",15,null],[11,"dimension","","",15,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"iter","","",15,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",15,{"inputs":[{"name":"i"}],"output":{"name":"vector5"}}],[11,"canonical_basis","","",15,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vector5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"from","","",15,{"inputs":[{"name":"vector6"}],"output":{"name":"vector5"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"bool"}}],[11,"encode","","",16,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"add_assign","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"sub","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"sub_assign","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"sub","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"mul","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"mul_assign","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"mul","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"div","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"div_assign","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"div","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"zero","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"is_zero","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"abs","","",16,{"inputs":[{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"x","","Create the element of the canonical basis having this component set to one and all the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"y","","Create the element of the canonical basis having this component set to one and all the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"z","","Create the element of the canonical basis having this component set to one and all the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"w","","Create the element of the canonical basis having this component set to one and all the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"a","","Create the element of the canonical basis having this component set to one and all the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"b","","Create the element of the canonical basis having this component set to one and all the others set to zero.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"dot","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"n"}}],[11,"norm_squared","","",16,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"normalize_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"inverse_translation","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"append_translation_mut","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"append_translation","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"prepend_translation_mut","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"prepend_translation","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"set_translation","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"translate","","",16,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"point6"}}],[11,"inverse_translate","","",16,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"point6"}}],[11,"rotate","","",16,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",16,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",22,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"inverse_rotate","","",22,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",16,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"point6"}}],[11,"inverse_transform","","",16,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"point6"}}],[11,"to_point","","Converts this vector to a point.",16,{"inputs":[{"name":"self"}],"output":{"name":"point6"}}],[11,"as_point","","Reinterprets this vector as a point.",16,{"inputs":[{"name":"self"}],"output":{"name":"point6"}}],[11,"mean","","",16,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"repeat","","",16,{"inputs":[{"name":"n"}],"output":{"name":"vector6"}}],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"vector6"}}],[11,"add_assign","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"sub_assign","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"sub","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"mul_assign","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"mul","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"div_assign","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"div","","",16,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"new","","Creation from component values.",16,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"inf","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"sup","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"bool"}}],[11,"partial_le","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"bool"}}],[11,"from","","",16,{"inputs":[{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"approx_epsilon","","",16,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",16,{"inputs":[{"name":"self"},{"name":"vector6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",16,{"inputs":[{"name":"self"},{"name":"vector6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",16,{"inputs":[{"name":"self"},{"name":"n"},{"name":"vector6"}],"output":null}],[11,"max_value","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"min_value","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"len","","The dimension of this entity.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",16,null],[11,"as_mut","","",16,null],[11,"from","","",16,null],[11,"dimension","","",16,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"iter","","",16,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"vector6"}}],[11,"canonical_basis","","",16,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",16,{"inputs":[{"name":"vector6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"point1"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"origin","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"is_origin","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"vector1"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"point1"}}],[11,"add_assign","","",17,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"point1"}}],[11,"sub_assign","","",17,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"to_vector","","Converts this point to its associated vector.",17,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",17,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"to_vector","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"as_vector","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"set_coords","","",17,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_homogeneous","","",17,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"from","","",17,{"inputs":[{"name":"point2"}],"output":{"name":"point1"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"point1"}}],[11,"repeat","","",17,{"inputs":[{"name":"n"}],"output":{"name":"point1"}}],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"point1"}}],[11,"add_assign","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"sub_assign","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"mul_assign","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"div_assign","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point1"}}],[11,"new","","Creation from component values.",17,{"inputs":[{"name":"n"}],"output":{"name":"point1"}}],[11,"inf","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"point1"}}],[11,"sup","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"point1"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"partial_le","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"point1"}],"output":{"name":"point1"}}],[11,"approx_epsilon","","",17,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",17,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",17,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",17,{"inputs":[{"name":"self"},{"name":"point1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",17,{"inputs":[{"name":"self"},{"name":"point1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",17,{"inputs":[{"name":"self"},{"name":"n"},{"name":"point1"}],"output":null}],[11,"max_value","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"min_value","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"len","","The dimension of this entity.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",17,null],[11,"as_mut","","",17,null],[11,"from","","",17,null],[11,"dimension","","",17,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",17,null],[11,"index_mut","","",17,null],[11,"iter","","",17,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"point1"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"origin","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"is_origin","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"add_assign","","",18,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"sub_assign","","",18,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"to_vector","","Converts this point to its associated vector.",18,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",18,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"to_vector","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"as_vector","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"set_coords","","",18,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_homogeneous","","",18,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"from","","",18,{"inputs":[{"name":"point3"}],"output":{"name":"point2"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"point2"}}],[11,"repeat","","",18,{"inputs":[{"name":"n"}],"output":{"name":"point2"}}],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"point2"}}],[11,"add_assign","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"sub_assign","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"mul_assign","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"div_assign","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point2"}}],[11,"new","","Creation from component values.",18,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point2"}}],[11,"inf","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"sup","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"partial_le","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"from","","",18,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"approx_epsilon","","",18,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",18,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",18,{"inputs":[{"name":"self"},{"name":"point2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",18,{"inputs":[{"name":"self"},{"name":"point2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",18,{"inputs":[{"name":"self"},{"name":"n"},{"name":"point2"}],"output":null}],[11,"max_value","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"min_value","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"len","","The dimension of this entity.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",18,null],[11,"as_mut","","",18,null],[11,"from","","",18,null],[11,"dimension","","",18,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"iter","","",18,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"point2"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"origin","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"is_origin","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"add_assign","","",19,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"sub_assign","","",19,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"to_vector","","Converts this point to its associated vector.",19,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",19,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"to_vector","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"as_vector","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"set_coords","","",19,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_homogeneous","","",19,{"inputs":[{"name":"self"}],"output":{"name":"point4"}}],[11,"from","","",19,{"inputs":[{"name":"point4"}],"output":{"name":"point3"}}],[11,"neg","","",19,{"inputs":[{"name":"self"}],"output":{"name":"point3"}}],[11,"repeat","","",19,{"inputs":[{"name":"n"}],"output":{"name":"point3"}}],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"point3"}}],[11,"add_assign","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"sub_assign","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"mul_assign","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"div_assign","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point3"}}],[11,"new","","Creation from component values.",19,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point3"}}],[11,"inf","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"sup","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"partial_le","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"from","","",19,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"approx_epsilon","","",19,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",19,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",19,{"inputs":[{"name":"self"},{"name":"point3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",19,{"inputs":[{"name":"self"},{"name":"point3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",19,{"inputs":[{"name":"self"},{"name":"n"},{"name":"point3"}],"output":null}],[11,"max_value","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"min_value","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"len","","The dimension of this entity.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"from","","",19,null],[11,"dimension","","",19,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",19,null],[11,"index_mut","","",19,null],[11,"iter","","",19,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",19,{"inputs":[{"name":"i"}],"output":{"name":"point3"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"point4"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"origin","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"is_origin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"vector4"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"point4"}}],[11,"add_assign","","",20,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"point4"}}],[11,"sub_assign","","",20,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"to_vector","","Converts this point to its associated vector.",20,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",20,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"to_vector","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"as_vector","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"set_coords","","",20,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_homogeneous","","",20,{"inputs":[{"name":"self"}],"output":{"name":"point5"}}],[11,"from","","",20,{"inputs":[{"name":"point5"}],"output":{"name":"point4"}}],[11,"neg","","",20,{"inputs":[{"name":"self"}],"output":{"name":"point4"}}],[11,"repeat","","",20,{"inputs":[{"name":"n"}],"output":{"name":"point4"}}],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"point4"}}],[11,"add_assign","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"add","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"sub_assign","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"sub","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"mul_assign","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"div_assign","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"div","","",20,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point4"}}],[11,"new","","Creation from component values.",20,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point4"}}],[11,"inf","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"point4"}}],[11,"sup","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"point4"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"bool"}}],[11,"partial_le","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"bool"}}],[11,"from","","",20,{"inputs":[{"name":"point4"}],"output":{"name":"point4"}}],[11,"approx_epsilon","","",20,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",20,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",20,{"inputs":[{"name":"self"},{"name":"point4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",20,{"inputs":[{"name":"self"},{"name":"point4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",20,{"inputs":[{"name":"self"},{"name":"n"},{"name":"point4"}],"output":null}],[11,"max_value","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"min_value","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"len","","The dimension of this entity.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",20,null],[11,"as_mut","","",20,null],[11,"from","","",20,null],[11,"dimension","","",20,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",20,null],[11,"index_mut","","",20,null],[11,"iter","","",20,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",20,{"inputs":[{"name":"i"}],"output":{"name":"point4"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"point5"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"origin","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"is_origin","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"vector5"}}],[11,"add","","",21,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"point5"}}],[11,"add_assign","","",21,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"sub","","",21,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"point5"}}],[11,"sub_assign","","",21,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"to_vector","","Converts this point to its associated vector.",21,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",21,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"to_vector","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"as_vector","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"set_coords","","",21,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_homogeneous","","",21,{"inputs":[{"name":"self"}],"output":{"name":"point6"}}],[11,"from","","",21,{"inputs":[{"name":"point6"}],"output":{"name":"point5"}}],[11,"neg","","",21,{"inputs":[{"name":"self"}],"output":{"name":"point5"}}],[11,"repeat","","",21,{"inputs":[{"name":"n"}],"output":{"name":"point5"}}],[11,"rand","","",21,{"inputs":[{"name":"r"}],"output":{"name":"point5"}}],[11,"add_assign","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"add","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"sub_assign","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"sub","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"mul_assign","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"mul","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"div_assign","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"div","","",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point5"}}],[11,"new","","Creation from component values.",21,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point5"}}],[11,"inf","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"point5"}}],[11,"sup","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"point5"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"bool"}}],[11,"partial_le","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"bool"}}],[11,"from","","",21,{"inputs":[{"name":"point5"}],"output":{"name":"point5"}}],[11,"approx_epsilon","","",21,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",21,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",21,{"inputs":[{"name":"self"},{"name":"point5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",21,{"inputs":[{"name":"self"},{"name":"point5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",21,{"inputs":[{"name":"self"},{"name":"n"},{"name":"point5"}],"output":null}],[11,"max_value","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"min_value","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"len","","The dimension of this entity.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",21,null],[11,"as_mut","","",21,null],[11,"from","","",21,null],[11,"dimension","","",21,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"iter","","",21,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"point5"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"point6"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"origin","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"is_origin","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"vector6"}}],[11,"add","","",22,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"point6"}}],[11,"add_assign","","",22,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"sub","","",22,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"point6"}}],[11,"sub_assign","","",22,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"to_vector","","Converts this point to its associated vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"to_vector","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"as_vector","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"set_coords","","",22,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",22,{"inputs":[{"name":"self"}],"output":{"name":"point6"}}],[11,"repeat","","",22,{"inputs":[{"name":"n"}],"output":{"name":"point6"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"point6"}}],[11,"add_assign","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"add","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"sub_assign","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"sub","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"mul_assign","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"mul","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"div_assign","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"div","","",22,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"point6"}}],[11,"new","","Creation from component values.",22,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point6"}}],[11,"inf","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"point6"}}],[11,"sup","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"point6"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"bool"}}],[11,"partial_le","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"bool"}}],[11,"from","","",22,{"inputs":[{"name":"point6"}],"output":{"name":"point6"}}],[11,"approx_epsilon","","",22,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",22,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",22,{"inputs":[{"name":"self"},{"name":"point6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",22,{"inputs":[{"name":"self"},{"name":"point6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",22,{"inputs":[{"name":"self"},{"name":"n"},{"name":"point6"}],"output":null}],[11,"max_value","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"min_value","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"len","","The dimension of this entity.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",22,null],[11,"as_mut","","",22,null],[11,"from","","",22,null],[11,"dimension","","",22,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",22,null],[11,"index_mut","","",22,null],[11,"iter","","",22,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"from_iter","","",22,{"inputs":[{"name":"i"}],"output":{"name":"point6"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",23,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",23,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",23,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",23,{"inputs":[{"name":"self"}],"output":null}],[11,"from_parts","","Creates a new quaternion from its scalar and vector parts.",23,{"inputs":[{"name":"n"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"from_polar_decomposition","","Creates a new quaternion from its polar decomposition.",23,{"inputs":[{"name":"n"},{"name":"n"},{"name":"unit"}],"output":{"name":"quaternion"}}],[11,"polar_decomposition","","The polar decomposition of this quaternion.",23,null],[11,"inverse","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"norm_squared","","",23,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",23,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"normalize_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"mul","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"mul_assign","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"div","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"div_assign","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"exp","","Compute the exponential of a quaternion.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"powf","","Raise the quaternion to a given floating power.",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"one","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"vector3"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"point3"}}],[11,"mul_assign","","",13,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul_assign","","",19,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"zero","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"is_zero","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"w","","Create the element of the canonical basis having this component set to one and all the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"i","","Create the element of the canonical basis having this component set to one and all the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"j","","Create the element of the canonical basis having this component set to one and all the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"k","","Create the element of the canonical basis having this component set to one and all the others set to zero.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"add","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"add_assign","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"add","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sub_assign","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":null}],[11,"sub","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"from_iter","","",23,{"inputs":[{"name":"i"}],"output":{"name":"quaternion"}}],[11,"neg","","",23,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"repeat","","",23,{"inputs":[{"name":"n"}],"output":{"name":"quaternion"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"quaternion"}}],[11,"add_assign","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"add","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"sub_assign","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"sub","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"mul_assign","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"mul","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"div_assign","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"div","","",23,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"new","","Creation from component values.",23,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"inf","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"sup","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"partialordering"}}],[11,"partial_lt","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"partial_le","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"partial_gt","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"partial_ge","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"from","","",23,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"approx_epsilon","","",23,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",23,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",23,{"inputs":[{"name":"self"},{"name":"quaternion"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"at_fast","","Unsafe read access to a vector element by index.",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"axpy","","",23,{"inputs":[{"name":"self"},{"name":"n"},{"name":"quaternion"}],"output":null}],[11,"max_value","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"min_value","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"len","","The dimension of this entity.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ref","","",23,null],[11,"as_mut","","",23,null],[11,"from","","",23,null],[11,"dimension","","",23,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"swap","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",23,null],[11,"index_mut","","",23,null],[11,"iter","","",23,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new identity matrix.",38,{"inputs":[],"output":{"name":"identity"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"bool"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"matrix1"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_identity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"matrix1"}}],[11,"new","","",5,{"inputs":[{"name":"n"}],"output":{"name":"matrix1"}}],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"from","","",5,{"inputs":[{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"shape","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"ncols","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector1"}],"output":null}],[11,"column","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector1"}}],[11,"column_slice","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"nrows","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector1"}],"output":null}],[11,"row","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector1"}}],[11,"row_slice","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"transpose","","",5,{"inputs":[{"name":"self"}],"output":{"name":"matrix1"}}],[11,"transpose_mut","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"approx_epsilon","","",5,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mean","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"from_diagonal","","",5,{"inputs":[{"name":"vector1"}],"output":{"name":"matrix1"}}],[11,"diagonal","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"outer","","",11,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"matrix1"}}],[11,"repeat","","",5,{"inputs":[{"name":"n"}],"output":{"name":"matrix1"}}],[11,"abs","","",5,{"inputs":[{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"matrix1"}}],[11,"is_zero","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"div_assign","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix1"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"matrix1"}}],[11,"dimension","","",5,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"mul_assign","","",5,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"mul","","",11,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"vector1"}}],[11,"mul_assign","","",11,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":null}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"point1"}],"output":{"name":"point1"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":{"name":"point1"}}],[11,"mul_assign","","",17,{"inputs":[{"name":"self"},{"name":"matrix1"}],"output":null}],[11,"to_homogeneous","","",5,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"from","","",5,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix1"}}],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"name":"matrix1"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_identity","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"matrix2"}}],[11,"new","","",6,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"from","","",6,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"iter","","",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"shape","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"ncols","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector2"}],"output":null}],[11,"column","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"column_slice","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"nrows","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector2"}],"output":null}],[11,"row","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"row_slice","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"transpose","","",6,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"transpose_mut","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"approx_epsilon","","",6,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mean","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"from_diagonal","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"diagonal","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"outer","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"repeat","","",6,{"inputs":[{"name":"n"}],"output":{"name":"matrix2"}}],[11,"abs","","",6,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"matrix2"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"matrix2"}}],[11,"dimension","","",6,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"to_homogeneous","","",6,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"from","","",6,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix2"}}],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"name":"matrix2"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"encode","","",7,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_identity","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"matrix3"}}],[11,"new","","",7,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"from","","",7,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"shape","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"ncols","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector3"}],"output":null}],[11,"column","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"column_slice","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"nrows","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector3"}],"output":null}],[11,"row","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"row_slice","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"transpose","","",7,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"transpose_mut","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"approx_epsilon","","",7,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mean","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"from_diagonal","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"diagonal","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"outer","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"repeat","","",7,{"inputs":[{"name":"n"}],"output":{"name":"matrix3"}}],[11,"abs","","",7,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"matrix3"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"div_assign","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"matrix3"}}],[11,"dimension","","",7,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"to_homogeneous","","",7,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"from","","",7,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix3"}}],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"matrix3"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_identity","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"matrix4"}}],[11,"new","","",8,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"from","","",8,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"shape","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"ncols","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector4"}],"output":null}],[11,"column","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"column_slice","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"nrows","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector4"}],"output":null}],[11,"row","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"row_slice","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"transpose","","",8,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"transpose_mut","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"approx_epsilon","","",8,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mean","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"from_diagonal","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"diagonal","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vector4"}}],[11,"outer","","",14,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"repeat","","",8,{"inputs":[{"name":"n"}],"output":{"name":"matrix4"}}],[11,"abs","","",8,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"matrix4"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"add_assign","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub_assign","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"add_assign","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"sub_assign","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"div_assign","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"mul_assign","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"one","","",8,{"inputs":[],"output":{"name":"matrix4"}}],[11,"dimension","","",8,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul_assign","","",8,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul","","",14,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"vector4"}}],[11,"mul_assign","","",14,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"point4"}],"output":{"name":"point4"}}],[11,"mul","","",20,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":{"name":"point4"}}],[11,"mul_assign","","",20,{"inputs":[{"name":"self"},{"name":"matrix4"}],"output":null}],[11,"inverse","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",8,{"inputs":[{"name":"self"}],"output":{"name":"matrix5"}}],[11,"from","","",8,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix4"}}],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"matrix4"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"bool"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"matrix5"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_identity","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"matrix5"}}],[11,"new","","",9,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"from","","",9,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"iter","","",9,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"shape","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"ncols","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector5"}],"output":null}],[11,"column","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector5"}}],[11,"column_slice","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"nrows","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector5"}],"output":null}],[11,"row","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector5"}}],[11,"row_slice","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"transpose","","",9,{"inputs":[{"name":"self"}],"output":{"name":"matrix5"}}],[11,"transpose_mut","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"approx_epsilon","","",9,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mean","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"from_diagonal","","",9,{"inputs":[{"name":"vector5"}],"output":{"name":"matrix5"}}],[11,"diagonal","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vector5"}}],[11,"outer","","",15,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"matrix5"}}],[11,"repeat","","",9,{"inputs":[{"name":"n"}],"output":{"name":"matrix5"}}],[11,"abs","","",9,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"matrix5"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"add_assign","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"sub_assign","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"add_assign","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"sub_assign","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"div_assign","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"div","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"mul_assign","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"one","","",9,{"inputs":[],"output":{"name":"matrix5"}}],[11,"dimension","","",9,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"mul_assign","","",9,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":null}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"mul","","",15,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"vector5"}}],[11,"mul_assign","","",15,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":null}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"point5"}],"output":{"name":"point5"}}],[11,"mul","","",21,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":{"name":"point5"}}],[11,"mul_assign","","",21,{"inputs":[{"name":"self"},{"name":"matrix5"}],"output":null}],[11,"inverse","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",9,{"inputs":[{"name":"self"}],"output":{"name":"matrix6"}}],[11,"from","","",9,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix5"}}],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"matrix5"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"matrix6"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_identity","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"matrix6"}}],[11,"new","","",10,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"as_ref","","",10,null],[11,"as_mut","","",10,null],[11,"from","","",10,null],[11,"at_fast","","",10,null],[11,"set_fast","","",10,null],[11,"from","","",10,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"iter","","",10,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"shape","","",10,null],[11,"swap","","",10,null],[11,"unsafe_at","","",10,null],[11,"unsafe_set","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"ncols","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_column","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector6"}],"output":null}],[11,"column","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector6"}}],[11,"column_slice","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"nrows","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_row","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector6"}],"output":null}],[11,"row","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector6"}}],[11,"row_slice","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"transpose","","",10,{"inputs":[{"name":"self"}],"output":{"name":"matrix6"}}],[11,"transpose_mut","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"approx_epsilon","","",10,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",10,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mean","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"from_diagonal","","",10,{"inputs":[{"name":"vector6"}],"output":{"name":"matrix6"}}],[11,"diagonal","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vector6"}}],[11,"outer","","",16,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"matrix6"}}],[11,"repeat","","",10,{"inputs":[{"name":"n"}],"output":{"name":"matrix6"}}],[11,"abs","","",10,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"matrix6"}}],[11,"is_zero","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"add_assign","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"sub_assign","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":null}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"add_assign","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"sub_assign","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"div_assign","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"div","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"mul_assign","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"one","","",10,{"inputs":[],"output":{"name":"matrix6"}}],[11,"dimension","","",10,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"mul_assign","","",10,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":null}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"mul","","",16,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"vector6"}}],[11,"mul_assign","","",16,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":null}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"point6"}],"output":{"name":"point6"}}],[11,"mul","","",22,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":{"name":"point6"}}],[11,"mul_assign","","",22,{"inputs":[{"name":"self"},{"name":"matrix6"}],"output":null}],[11,"inverse","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eigen_qr","","",10,null],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"matrix6"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",39,{"inputs":[{"name":"vector1"}],"output":{"name":"rotation2"}}],[11,"rotation","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"inverse_rotation","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"append_rotation_mut","","",39,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"append_rotation","","",39,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"rotation2"}}],[11,"prepend_rotation_mut","","",39,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"prepend_rotation","","",39,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"rotation2"}}],[11,"set_rotation","","",39,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"angle_to","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rotation2"}}],[11,"rand","","",39,{"inputs":[{"name":"r"}],"output":{"name":"rotation2"}}],[11,"absolute_rotate","","",39,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",40,{"inputs":[{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"from_matrix_unchecked","","Builds a rotation matrix from an orthogonal matrix.",40,{"inputs":[{"name":"matrix3"}],"output":{"name":"rotation3"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",40,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rotation3"}}],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",40,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",40,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",40,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"rotation","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"inverse_rotation","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"append_rotation_mut","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"append_rotation","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"prepend_rotation_mut","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"prepend_rotation","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"set_rotation","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"angle_to","","",40,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",40,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rotation3"}}],[11,"rand","","",40,{"inputs":[{"name":"r"}],"output":{"name":"rotation3"}}],[11,"absolute_rotate","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"submatrix","","This rotation's underlying matrix.",39,{"inputs":[{"name":"self"}],"output":{"name":"matrix2"}}],[11,"rotate","","",39,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"inverse_rotate","","",39,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rotate","","",39,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_rotate","","",39,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"transform","","",39,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"inverse_transform","","",39,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"transform","","",39,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_transform","","",39,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"to_rotation_matrix","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"one","","",39,{"inputs":[],"output":{"name":"rotation2"}}],[11,"new_identity","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"rotation2"}}],[11,"from_diagonal","","",39,{"inputs":[{"name":"vector2"}],"output":{"name":"rotation2"}}],[11,"diagonal","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"mul","","",39,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"rotation2"}}],[11,"mul_assign","","",39,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":null}],[11,"mul","","",39,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"vector2"}}],[11,"mul_assign","","",12,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":null}],[11,"mul","","",39,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"point2"}}],[11,"mul_assign","","",18,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":null}],[11,"inverse_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"transpose","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"transpose_mut","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"nrows","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row","","",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"set_row","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector2"}],"output":null}],[11,"ncols","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","",39,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"set_column","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector2"}],"output":null}],[11,"index","","",39,null],[11,"to_homogeneous","","",39,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"approx_epsilon","","",39,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",39,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",39,{"inputs":[{"name":"self"},{"name":"rotation2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",39,{"inputs":[{"name":"self"},{"name":"rotation2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"abs","","",39,{"inputs":[{"name":"rotation2"}],"output":{"name":"matrix2"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimension","","",39,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"submatrix","","This rotation's underlying matrix.",40,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"rotate","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"inverse_rotate","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rotate","","",40,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_rotate","","",40,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"transform","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"inverse_transform","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform","","",40,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_transform","","",40,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"to_rotation_matrix","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"one","","",40,{"inputs":[],"output":{"name":"rotation3"}}],[11,"new_identity","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"rotation3"}}],[11,"from_diagonal","","",40,{"inputs":[{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"diagonal","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"rotation3"}}],[11,"mul_assign","","",40,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":null}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"vector3"}}],[11,"mul_assign","","",13,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":null}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"point3"}}],[11,"mul_assign","","",19,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":null}],[11,"inverse_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"transpose","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"transpose_mut","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"nrows","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row","","",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"set_row","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector3"}],"output":null}],[11,"ncols","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"set_column","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector3"}],"output":null}],[11,"index","","",40,null],[11,"to_homogeneous","","",40,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"approx_epsilon","","",40,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",40,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq","","",40,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",40,{"inputs":[{"name":"self"},{"name":"rotation3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",40,{"inputs":[{"name":"self"},{"name":"rotation3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"abs","","",40,{"inputs":[{"name":"rotation3"}],"output":{"name":"matrix3"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimension","","",40,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"isometry2"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":{"name":"bool"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"isometry3"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"new","","Creates a new isometry from an axis-angle rotation, and a vector.",1,{"inputs":[{"name":"vector2"},{"name":"vector1"}],"output":{"name":"isometry2"}}],[11,"from_rotation_matrix","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"vector2"},{"name":"rotation2"}],"output":{"name":"isometry2"}}],[11,"to_rotation_matrix","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"isometry2"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":{"name":"isometry2"}}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"isometry2"}}],[11,"mul","","",39,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":{"name":"isometry2"}}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"translation","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"inverse_translation","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"append_translation_mut","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"append_translation","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"isometry2"}}],[11,"prepend_translation_mut","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"prepend_translation","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"isometry2"}}],[11,"set_translation","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":null}],[11,"translate","","",1,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_translate","","",1,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"rotation","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"inverse_rotation","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"append_rotation_mut","","",1,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"append_rotation","","",1,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"isometry2"}}],[11,"prepend_rotation_mut","","",1,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"prepend_rotation","","",1,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":{"name":"isometry2"}}],[11,"set_rotation","","",1,{"inputs":[{"name":"self"},{"name":"vector1"}],"output":null}],[11,"rotate","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"inverse_rotate","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"transformation","","",1,{"inputs":[{"name":"self"}],"output":{"name":"isometry2"}}],[11,"inverse_transformation","","",1,{"inputs":[{"name":"self"}],"output":{"name":"isometry2"}}],[11,"append_transformation_mut","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":null}],[11,"append_transformation","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":{"name":"isometry2"}}],[11,"prepend_transformation_mut","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":null}],[11,"prepend_transformation","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":{"name":"isometry2"}}],[11,"set_transformation","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":null}],[11,"transform","","",1,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_transform","","",1,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",1,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"approx_epsilon","","",1,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",1,{"inputs":[{"name":"self"},{"name":"isometry2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"isometry2"}}],[11,"absolute_rotate","","",1,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimension","","",1,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"new","","Creates a new isometry from an axis-angle rotation, and a vector.",2,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"from_rotation_matrix","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"vector3"},{"name":"rotation3"}],"output":{"name":"isometry3"}}],[11,"to_rotation_matrix","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"isometry3"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":{"name":"isometry3"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"isometry3"}}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":{"name":"isometry3"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"translation","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"inverse_translation","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"append_translation_mut","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"append_translation","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"prepend_translation_mut","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"prepend_translation","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"set_translation","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"translate","","",2,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_translate","","",2,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"rotation","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"inverse_rotation","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"append_rotation_mut","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"append_rotation","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"prepend_rotation_mut","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"prepend_rotation","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"set_rotation","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"rotate","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"inverse_rotate","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transformation","","",2,{"inputs":[{"name":"self"}],"output":{"name":"isometry3"}}],[11,"inverse_transformation","","",2,{"inputs":[{"name":"self"}],"output":{"name":"isometry3"}}],[11,"append_transformation_mut","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":null}],[11,"append_transformation","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":{"name":"isometry3"}}],[11,"prepend_transformation_mut","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":null}],[11,"prepend_transformation","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":{"name":"isometry3"}}],[11,"set_transformation","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":null}],[11,"transform","","",2,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_transform","","",2,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",2,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"approx_epsilon","","",2,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",2,{"inputs":[{"name":"self"},{"name":"isometry3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"isometry3"}}],[11,"absolute_rotate","","",2,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimension","","",2,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":{"name":"bool"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"similarity2"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"similarity3"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new similarity transformation from a vector, an axis-angle rotation, and a scale factor.",3,{"inputs":[{"name":"vector2"},{"name":"vector1"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"from_rotation_matrix","","Creates a new similarity transformation from a rotation matrix, a vector, and a scale factor.",3,{"inputs":[{"name":"vector2"},{"name":"rotation2"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"from_isometry","","Creates a new similarity transformation from an isometry and a scale factor.",3,{"inputs":[{"name":"isometry2"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"scale","","The scale factor of this similarity transformation.",3,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"inverse_scale","","The inverse scale factor of this similarity transformation.",3,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"append_scale_mut","","Appends in-place a scale to this similarity transformation.",3,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_scale","","Appends a scale to this similarity transformation.",3,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"prepend_scale_mut","","Prepends in-place a scale to this similarity transformation.",3,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scale","","Prepends a scale to this similarity transformation.",3,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"set_scale","","Sets the scale of this similarity transformation.",3,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"one","","",3,{"inputs":[],"output":{"name":"similarity2"}}],[11,"transformation","","",3,{"inputs":[{"name":"self"}],"output":{"name":"similarity2"}}],[11,"inverse_transformation","","",3,{"inputs":[{"name":"self"}],"output":{"name":"similarity2"}}],[11,"append_transformation_mut","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":null}],[11,"append_transformation","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":{"name":"similarity2"}}],[11,"prepend_transformation_mut","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":null}],[11,"prepend_transformation","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":{"name":"similarity2"}}],[11,"set_transformation","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":null}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":{"name":"similarity2"}}],[11,"mul_assign","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":null}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":{"name":"similarity2"}}],[11,"mul_assign","","",3,{"inputs":[{"name":"self"},{"name":"isometry2"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":{"name":"similarity2"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":{"name":"similarity2"}}],[11,"mul_assign","","",3,{"inputs":[{"name":"self"},{"name":"rotation2"}],"output":null}],[11,"mul","","",39,{"inputs":[{"name":"self"},{"name":"similarity2"}],"output":{"name":"similarity2"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"transform","","",3,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_transform","","",3,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"inverse_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"approx_epsilon","","",3,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",3,{"inputs":[{"name":"self"},{"name":"similarity2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"similarity2"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimension","","",3,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"new","","Creates a new similarity transformation from a vector, an axis-angle rotation, and a scale factor.",4,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"from_rotation_matrix","","Creates a new similarity transformation from a rotation matrix, a vector, and a scale factor.",4,{"inputs":[{"name":"vector3"},{"name":"rotation3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"from_isometry","","Creates a new similarity transformation from an isometry and a scale factor.",4,{"inputs":[{"name":"isometry3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"scale","","The scale factor of this similarity transformation.",4,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"inverse_scale","","The inverse scale factor of this similarity transformation.",4,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"append_scale_mut","","Appends in-place a scale to this similarity transformation.",4,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_scale","","Appends a scale to this similarity transformation.",4,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"prepend_scale_mut","","Prepends in-place a scale to this similarity transformation.",4,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scale","","Prepends a scale to this similarity transformation.",4,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"set_scale","","Sets the scale of this similarity transformation.",4,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"one","","",4,{"inputs":[],"output":{"name":"similarity3"}}],[11,"transformation","","",4,{"inputs":[{"name":"self"}],"output":{"name":"similarity3"}}],[11,"inverse_transformation","","",4,{"inputs":[{"name":"self"}],"output":{"name":"similarity3"}}],[11,"append_transformation_mut","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":null}],[11,"append_transformation","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":{"name":"similarity3"}}],[11,"prepend_transformation_mut","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":null}],[11,"prepend_transformation","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":{"name":"similarity3"}}],[11,"set_transformation","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":{"name":"similarity3"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":{"name":"similarity3"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"self"},{"name":"isometry3"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":{"name":"similarity3"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":{"name":"similarity3"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"self"},{"name":"rotation3"}],"output":null}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"similarity3"}],"output":{"name":"similarity3"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"transform","","",4,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_transform","","",4,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_homogeneous","","",4,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"approx_epsilon","","",4,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",4,{"inputs":[{"name":"self"},{"name":"similarity3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"similarity3"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimension","","",4,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"perspective3"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"perspective3"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"perspective3"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"perspectivematrix3"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"perspectivematrix3"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"perspectivematrix3"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new 3D perspective projection.",41,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspective3"}}],[11,"to_matrix","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",41,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"to_perspective_matrix","","Build a `PerspectiveMatrix3` representing this projection.",41,{"inputs":[{"name":"self"}],"output":{"name":"perspectivematrix3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",41,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fovy","","Gets the y field of view of the view frustrum.",41,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",41,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",41,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",41,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_fovy","","Sets the y field of view of the view frustrum.",41,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view frustrum.",41,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",41,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"project_point","","Projects a point.",41,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector.",41,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",42,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspectivematrix3"}}],[11,"from_matrix_unchecked","","Creates a new perspective projection matrix from a 4D matrix.",42,{"inputs":[{"name":"matrix4"}],"output":{"name":"perspectivematrix3"}}],[11,"as_matrix","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",42,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",42,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fovy","","Gets the y field of view of the view frustrum.",42,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",42,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",42,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view frustrum.",42,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_fovy","","Updates this projection with a new y field of view of the view frustrum.",42,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",42,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",42,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",42,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_point","","Projects a point.",42,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector.",42,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"to_matrix","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",42,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"orthographic3"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"orthographic3"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"orthographic3"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"orthographicmatrix3"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"orthographicmatrix3"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"orthographicmatrix3"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new 3D orthographic projection.",43,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographic3"}}],[11,"to_matrix","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",43,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"to_orthographic_matrix","","Build a `OrthographicMatrix3` representing this projection.",43,{"inputs":[{"name":"self"}],"output":{"name":"orthographicmatrix3"}}],[11,"left","","The smallest x-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"right","","The largest x-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"bottom","","The smallest y-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"top","","The largest y-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",43,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",43,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"project_point","","Projects a point.",43,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector.",43,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"new","","Creates a new orthographic projection matrix.",44,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographicmatrix3"}}],[11,"from_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",44,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographicmatrix3"}}],[11,"from_matrix_unchecked","","Creates a new orthographic matrix from a 4D matrix.",44,{"inputs":[{"name":"matrix4"}],"output":{"name":"orthographicmatrix3"}}],[11,"as_matrix","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",44,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"left","","The smallest x-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"right","","The largest x-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"bottom","","The smallest y-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"top","","The largest y-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",44,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",44,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",44,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",44,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",44,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",44,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",44,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",44,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_point","","Projects a point.",44,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"project_vector","","Projects a vector.",44,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"to_matrix","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",44,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Normalize the given value and return it wrapped on a `Unit` structure.",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to normalize the given value and return it wrapped on a `Unit` structure.",45,null],[11,"new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",45,null],[11,"try_new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",45,null],[11,"renormalize","","Normalizes this value again. This is useful when repeated computations might cause a drift in the norm because of float inaccuracies.",45,null],[11,"from_unit_value_unchecked","","Wraps the given value, assuming it is already normalized.",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unwrap","","Retrieves the underlying value.",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"one","","",38,{"inputs":[],"output":{"name":"identity"}}],[11,"inverse","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"transpose","","",38,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"transpose_mut","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"translate","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"inverse_translate","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"rotate","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"inverse_rotate","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"absolute_rotate","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"transform","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"inverse_transform","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"inverse","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"determinant","","",5,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"determinant","","",6,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"determinant","","",7,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"vector3"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"vector2"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":{"name":"point3"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":{"name":"point2"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"mul_assign","","",13,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"mul_assign","","",12,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"mul_assign","","",19,{"inputs":[{"name":"self"},{"name":"matrix3"}],"output":null}],[11,"mul_assign","","",18,{"inputs":[{"name":"self"},{"name":"matrix2"}],"output":null}],[11,"angle_to","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rotation2"}}],[11,"angle_to","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rotation3"}}],[11,"cross","","",12,{"inputs":[{"name":"self"},{"name":"vector2"}],"output":{"name":"vector1"}}],[11,"cross_matrix","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vector2"}}],[11,"cross","","",13,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cross_matrix","","",13,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"nrows","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vector1"}}],[11,"set_row","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"vector1"}],"output":null}],[11,"canonical_basis","","",11,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",11,{"inputs":[{"name":"vector1"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",12,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",12,{"inputs":[{"name":"vector2"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",13,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",13,{"inputs":[{"name":"vector3"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"sample","","",11,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",12,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",13,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"partialordering"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"partialordering"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `PartialOrdering` from an `Ordering`.",24,{"inputs":[{"name":"ordering"}],"output":{"name":"partialordering"}}],[11,"to_ordering","","Converts this `PartialOrdering` to an `Ordering`.",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"UnitQuaternion","","A unit quaternions. May be used to represent a rotation.",null,null],[8,"Absolute","","Trait of objects having an absolute value. This is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object. Typically, this will make all component of a matrix or vector positive.",46,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",47,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",48,{"inputs":[],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",48,{"inputs":[{"name":"self"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[10,"approx_ulps","","Default ULPs for approximation.",48,{"inputs":[],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",48,{"inputs":[{"name":"self"},{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"approx_eq","","Tests approximate equality.",48,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",49,{"inputs":[{"name":"self"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",50,{"inputs":[{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",50,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes' constant.",51,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",51,{"inputs":[],"output":{"name":"self"}}],[10,"e","","Euler's number.",51,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",51,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",51,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",51,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",51,{"inputs":[],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",52,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",52,{"inputs":[],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",53,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Column","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"column","","Reads the `i`-th column of `self`.",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c"}}],[10,"set_column","","Writes the `i`-th column of `self`.",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"c"}],"output":null}],[8,"ColumnSlice","","Trait to access part of a column of a matrix",null,null],[10,"column_slice","","Returns a view to a slice of a column of a matrix.",55,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"c"}}],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"r"}}],[8,"Covariance","","Trait for computing the covariance of a set of data.",null,null],[10,"covariance","","Computes the covariance of the obsevations stored by `m`:",57,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"CrossProductType","","The cross product output.",58,null],[10,"cross","","Computes the cross product between two elements (usually vectors).",58,null],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` = `v.cross_matrix().rmul(anything)`.",59,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[8,"Determinant","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"determinant","","Returns the determinant of `m`.",60,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[8,"Diagonal","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diagonal","","Creates a new matrix with the given diagonal.",61,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[10,"diagonal","","The diagonal of this matrix.",61,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[8,"Dimension","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dimension","","The dimension of the object.",62,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",63,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",64,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",65,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPoint","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"distance_squared","","Computes the square distance between two points.",66,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"distance","","Computes the distance between two points.",66,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[8,"FloatVector","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",67,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",68,{"inputs":[{"name":"self"},{"name":"i"},{"name":"i"}],"output":null}],[10,"unsafe_at","","Reads the `i`-th element of `self`.",68,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"n"}}],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",68,{"inputs":[{"name":"self"},{"name":"i"},{"name":"n"}],"output":null}],[8,"Inverse","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inverse","","Returns the inverse of `m`.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"inverse_mut","","In-place version of `inverse`.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",70,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",71,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[8,"Matrix","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the mean of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",72,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[16,"NormType","","The scalar type for the norm (i.e. the undelying field).",73,null],[11,"norm","","Computes the norm of `self`.",73,null],[10,"norm_squared","","Computes the squared norm of `self`.",73,null],[10,"normalize","","Gets the normalized version of a copy of `v`.",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes `self`.",73,null],[10,"try_normalize","","Gets the normalized version of a copy of `v` or `None` if the vector has a norm smaller or equal to `min_norm`. In particular, `.try_normalize(0.0)` returns `None` if the norm is exactly zero.",73,null],[10,"try_normalize_mut","","Normalized `v` or does nothing if the vector has a norm smaller or equal to `min_norm`.",73,null],[8,"NumPoint","","Trait grouping most common operations on points.",null,null],[8,"NumVector","","Trait grouping most common operations on vectors.",null,null],[8,"Origin","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"origin","","The trivial origin.",74,{"inputs":[],"output":{"name":"self"}}],[10,"is_origin","","Returns true if this points is exactly the trivial origin.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Outer","","Traits of objects having an outer product.",null,null],[16,"OuterProductType","","Result type of the outer product.",75,null],[10,"outer","","Computes the outer product: `a * b`",75,null],[8,"PartialOrder","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sup","","Returns the supremum of this value and another",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"partialordering"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",76,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PointAsVector","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[16,"Vector","","The vector type of the vector space associated to this point's affine space.",77,null],[10,"to_vector","","Converts this point to its associated vector.",77,null],[10,"as_vector","","Converts a reference to this point to a reference to its associated vector.",77,null],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",77,null],[8,"Repeat","","Trait for constructiong an object repeating a value.",null,null],[10,"repeat","","Returns a value with filled by `val`.",78,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",79,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[10,"inverse_rotate","","Applies an inverse rotation to `v`.",79,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A rotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",80,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[10,"inverse_rotation","","Gets the inverse rotation associated with `self`.",80,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[10,"append_rotation_mut","","Appends a rotation to this object.",80,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",80,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",80,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",80,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_rotation","","Sets the rotation of `self`.",80,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically be implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","","The output rotation matrix type.",81,null],[10,"to_rotation_matrix","","Gets the rotation matrix represented by `self`.",81,null],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,{"inputs":[{"name":"self"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,{"inputs":[{"name":"self"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,{"inputs":[{"name":"self"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,{"inputs":[{"name":"self"},{"name":"av"}],"output":null}],[8,"RotationTo","","Trait of object that can be rotated to be superimposed with another one of the same nature.",null,null],[16,"AngleType","","Type of the angle between two elements.",83,null],[16,"DeltaRotationType","","Type of the rotation between two elements.",83,null],[10,"angle_to","","Computes an angle nedded to transform the first element to the second one using a rotation.",83,null],[10,"rotation_to","","Computes the smallest rotation needed to transform the first element to the second one.",83,null],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"row","","Reads the `i`-th row of `self`.",84,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"r"}}],[10,"set_row","","Writes the `i`-th row of `self`.",84,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"r"}],"output":null}],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",85,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[8,"SquareMatrix","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",86,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",87,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[10,"inverse_transform","","Applies an inverse transformation to `v`.",87,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can be appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",88,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[10,"inverse_transformation","","Gets the inverse transformation of `self`.",88,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[10,"append_transformation_mut","","Appends a transformation to this object.",88,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",88,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",88,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",88,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[10,"set_transformation","","Sets the transformation of `self`.",88,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}],[8,"Translate","","Trait of objects able to translate other objects. This is typically implemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",89,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[10,"inverse_translate","","Apply an inverse translation to an object.",89,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[8,"Translation","","Trait of object which represent a translation, and to wich new translation can be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",90,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[10,"inverse_translation","","Gets the inverse translation associated with this object.",90,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[10,"append_translation_mut","","Appends a translation to this object.",90,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",90,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_translation_mut","","Prepends a translation to this object.",90,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",90,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_translation","","Sets the translation.",90,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",91,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"transpose_mut","","In-place version of `transposed`.",91,{"inputs":[{"name":"self"}],"output":null}],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",92,{"inputs":[{"name":"f"}],"output":null}],[14,"assert_approx_eq_eps","","Asserts approximate equality within a given tolerance of two values with the `ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps","","Asserts approximate equality within a given tolerance of two values with the `ApproxEq` trait, with tolerance specified in ULPs.",null,null],[11,"quaternion","","The underlying quaternion.",93,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"from_axisangle","","Creates a new quaternion from a unit vector (the rotation axis) and an angle (the rotation angle).",93,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"from_scaled_axis","","Same as `::from_axisangle` with the axis multiplied with the angle.",93,{"inputs":[{"name":"vector3"}],"output":{"name":"unitquaternion"}}],[11,"from_quaternion","","Creates a new unit quaternion from a quaternion.",93,{"inputs":[{"name":"quaternion"}],"output":{"name":"unitquaternion"}}],[11,"from_euler_angles","","Creates a new unit quaternion from Euler angles.",93,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"angle","","The rotation angle of this unit quaternion.",93,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"axis","","The rotation axis of this unit quaternion or `None` if the rotation is zero.",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_rotation_matrix","","Builds a rotation matrix from this quaternion.",93,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"one","","",93,{"inputs":[],"output":{"name":"unitquaternion"}}],[11,"inverse","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rand","","",93,{"inputs":[{"name":"r"}],"output":{"name":"unitquaternion"}}],[11,"approx_epsilon","","",93,{"inputs":[],"output":{"name":"n"}}],[11,"approx_ulps","","",93,{"inputs":[],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",93,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",93,{"inputs":[{"name":"self"},{"name":"unitquaternion"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",93,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"unitquaternion"}}],[11,"div_assign","","",93,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul","","",93,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":{"name":"unitquaternion"}}],[11,"mul_assign","","",93,{"inputs":[{"name":"self"},{"name":"unitquaternion"}],"output":null}],[11,"mul","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul","","",93,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"rotation","","",93,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"inverse_rotation","","",93,{"inputs":[{"name":"self"}],"output":{"name":"vector3"}}],[11,"append_rotation_mut","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"append_rotation","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"unitquaternion"}}],[11,"prepend_rotation_mut","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"prepend_rotation","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"unitquaternion"}}],[11,"set_rotation","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":null}],[11,"to_rotation_matrix","","",93,{"inputs":[{"name":"self"}],"output":{"name":"rotation3"}}],[11,"rotate","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"inverse_rotate","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rotate","","",93,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_rotate","","",93,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"angle_to","","",93,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",93,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"unitquaternion"}}],[11,"transform","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"inverse_transform","","",93,{"inputs":[{"name":"self"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform","","",93,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"inverse_transform","","",93,{"inputs":[{"name":"self"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dimension","","",93,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"exp","","Compute the exponential of a quaternion.",93,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",93,{"inputs":[{"name":"self"}],"output":{"name":"quaternion"}}],[11,"powf","","Raise this unit quaternion to a given floating power.",93,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,{"inputs":[{"name":"self"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,{"inputs":[{"name":"self"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,{"inputs":[{"name":"self"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,{"inputs":[{"name":"self"},{"name":"av"}],"output":null}],[11,"norm","","Computes the norm of `self`.",73,null],[11,"distance_squared","","Computes the square distance between two points.",66,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"distance","","Computes the distance between two points.",66,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",76,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"approx_eq","","Tests approximate equality.",48,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,{"inputs":[{"name":"self"},{"name":"m"}],"output":null}]],"paths":[[3,"DVector"],[3,"Isometry2"],[3,"Isometry3"],[3,"Similarity2"],[3,"Similarity3"],[3,"Matrix1"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Matrix5"],[3,"Matrix6"],[3,"Vector1"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Vector5"],[3,"Vector6"],[3,"Point1"],[3,"Point2"],[3,"Point3"],[3,"Point4"],[3,"Point5"],[3,"Point6"],[3,"Quaternion"],[4,"PartialOrdering"],[3,"DMatrix"],[3,"DMatrix1"],[3,"DVector1"],[3,"DMatrix2"],[3,"DVector2"],[3,"DMatrix3"],[3,"DVector3"],[3,"DMatrix4"],[3,"DVector4"],[3,"DMatrix5"],[3,"DVector5"],[3,"DMatrix6"],[3,"DVector6"],[3,"Identity"],[3,"Rotation2"],[3,"Rotation3"],[3,"Perspective3"],[3,"PerspectiveMatrix3"],[3,"Orthographic3"],[3,"OrthographicMatrix3"],[3,"Unit"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Column"],[8,"ColumnSlice"],[8,"RowSlice"],[8,"Covariance"],[8,"Cross"],[8,"CrossMatrix"],[8,"Determinant"],[8,"Diagonal"],[8,"Dimension"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPoint"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inverse"],[8,"Iterable"],[8,"IterableMut"],[8,"Mean"],[8,"Norm"],[8,"Origin"],[8,"Outer"],[8,"PartialOrder"],[8,"PointAsVector"],[8,"Repeat"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"RotationTo"],[8,"Row"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"],[6,"UnitQuaternion"]]};
searchIndex["newtype_derive"] = {"doc":"This crate provides several macros for deriving implementations of various traits for \"newtype\" wrappers (*i.e.* tuple structs with a single element).  That is, given a tuple struct with exactly one field (*e.g.* `struct Buckets(i32)`), these macros will derive \"obvious\" implementations of traits such as `Add`, `Neg`, `Index`, `Deref`, `From`, etc.","items":[[14,"NewtypeAdd","newtype_derive","",null,null],[14,"NewtypeAddAssign","","",null,null],[14,"NewtypeBitAnd","","",null,null],[14,"NewtypeBitAndAssign","","",null,null],[14,"NewtypeBitOr","","",null,null],[14,"NewtypeBitOrAssign","","",null,null],[14,"NewtypeBitXor","","",null,null],[14,"NewtypeBitXorAssign","","",null,null],[14,"NewtypeDiv","","",null,null],[14,"NewtypeDivAssign","","",null,null],[14,"NewtypeMul","","",null,null],[14,"NewtypeMulAssign","","",null,null],[14,"NewtypeRem","","",null,null],[14,"NewtypeRemAssign","","",null,null],[14,"NewtypeSub","","",null,null],[14,"NewtypeSubAssign","","",null,null],[14,"NewtypeShl","","",null,null],[14,"NewtypeShlAssign","","",null,null],[14,"NewtypeShr","","",null,null],[14,"NewtypeShrAssign","","",null,null],[14,"NewtypeNeg","","",null,null],[14,"NewtypeNot","","",null,null],[14,"NewtypeDeref","","",null,null],[14,"NewtypeDerefMut","","",null,null],[14,"NewtypeIndex","","",null,null],[14,"NewtypeIndexMut","","",null,null],[14,"NewtypeFrom","","",null,null],[14,"NewtypeBinary","","",null,null],[14,"NewtypeDebug","","",null,null],[14,"NewtypeDisplay","","",null,null],[14,"NewtypeLowerExp","","",null,null],[14,"NewtypeLowerHex","","",null,null],[14,"NewtypeOctal","","",null,null],[14,"NewtypePointer","","",null,null],[14,"NewtypeUpperExp","","",null,null],[14,"NewtypeUpperHex","","",null,null]],"paths":[]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["ordered_float"] = {"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",null,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"orderedfloat"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"orderedfloat"}}],[11,"into_inner","","Get the value out.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"notnan"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"notnan"}}],[11,"new","","Create a NotNaN value.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Get the value out.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"floatisnan"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"floatisnan"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","",null,null],[10,"context","","",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","regex","",17,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",17,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",18,null],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",21,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",21,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",21,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",21,null],[11,"len","","Returns the total number of regular expressions in this set.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",22,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",25,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",26,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",30,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",34,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., ``.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[13,"UnsupportedClassChar","","Indicates that unsupported notation was used in a character class.",4,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rust_htslib"] = {"doc":"Rust-HTSlib provides a high level BAM API. Reading and writing BAM files is as easy as","items":[[0,"htslib","rust_htslib","",null,null],[3,"Struct___kstring_t","rust_htslib::htslib","",null,null],[12,"l","","",0,null],[12,"m","","",0,null],[12,"s","","",0,null],[3,"Struct_htsFormat","","",null,null],[12,"category","","",1,null],[12,"format","","",1,null],[12,"version","","",1,null],[12,"compression","","",1,null],[12,"compression_level","","",1,null],[12,"specific","","",1,null],[3,"Struct_Unnamed1","","",null,null],[12,"major","","",2,null],[12,"minor","","",2,null],[3,"Struct_Unnamed2","","",null,null],[12,"isbin_isright_isbe_iscram_dummy","","",3,null],[12,"lineno","","",3,null],[12,"line","","",3,null],[12,"_fn","","",3,null],[12,"fn_aux","","",3,null],[12,"fp","","",3,null],[12,"format","","",3,null],[3,"Union_Unnamed3","","",null,null],[12,"_bindgen_data_","","",4,null],[3,"Struct_Unnamed4","","",null,null],[12,"u","","",5,null],[12,"v","","",5,null],[3,"Struct_Unnamed5","","",null,null],[12,"readres_finished_dummy","","",6,null],[12,"tid","","",6,null],[12,"beg","","",6,null],[12,"end","","",6,null],[12,"n_off","","",6,null],[12,"i","","",6,null],[12,"curr_tid","","",6,null],[12,"curr_beg","","",6,null],[12,"curr_end","","",6,null],[12,"curr_off","","",6,null],[12,"off","","",6,null],[12,"readrec","","",6,null],[12,"bins","","",6,null],[3,"Struct_Unnamed6","","",null,null],[12,"n","","",7,null],[12,"m","","",7,null],[12,"a","","",7,null],[3,"Struct_Unnamed7","","",null,null],[12,"n_targets","","",8,null],[12,"ignore_sam_err","","",8,null],[12,"l_text","","",8,null],[12,"target_len","","",8,null],[12,"cigar_tab","","",8,null],[12,"target_name","","",8,null],[12,"text","","",8,null],[12,"sdict","","",8,null],[3,"Struct_Unnamed8","","",null,null],[12,"tid","","",9,null],[12,"pos","","",9,null],[12,"bin","","",9,null],[12,"qual","","",9,null],[12,"l_qname","","",9,null],[12,"flag","","",9,null],[12,"n_cigar","","",9,null],[12,"l_qseq","","",9,null],[12,"mtid","","",9,null],[12,"mpos","","",9,null],[12,"isize","","",9,null],[3,"Struct_Unnamed9","","",null,null],[12,"core","","",10,null],[12,"l_data","","",10,null],[12,"m_data","","",10,null],[12,"data","","",10,null],[12,"id","","",10,null],[3,"Struct_Unnamed10","","",null,null],[12,"b","","",11,null],[12,"qpos","","",11,null],[12,"indel","","",11,null],[12,"level","","",11,null],[12,"isdel_ishead_istail_isrefskip_isaux","","",11,null],[4,"Struct_BGZF","","",null,null],[4,"Struct_cram_fd","","",null,null],[4,"Struct_hFILE","","",null,null],[4,"Struct___hts_idx_t","","",null,null],[4,"Struct___bam_plp_t","","",null,null],[4,"Struct___bam_mplp_t","","",null,null],[5,"bgzf_close","","",null,null],[5,"bgzf_mt","","",null,null],[7,"hts_verbose","","",null,null],[7,"seq_nt16_table","","",null,null],[7,"seq_nt16_str","","",null,null],[7,"seq_nt16_int","","",null,null],[5,"bgzf_open","","",null,null],[5,"hts_version","","",null,null],[5,"hts_detect_format","","",null,null],[5,"hts_format_description","","",null,null],[5,"hts_open","","",null,null],[5,"hts_hopen","","",null,null],[5,"hts_close","","",null,null],[5,"hts_get_format","","",null,null],[5,"hts_set_opt","","",null,null],[5,"hts_getline","","",null,null],[5,"hts_readlines","","",null,null],[5,"hts_readlist","","",null,null],[5,"hts_set_threads","","",null,null],[5,"hts_set_fai_filename","","",null,null],[5,"hts_idx_init","","",null,null],[5,"hts_idx_destroy","","",null,null],[5,"hts_idx_push","","",null,null],[5,"hts_idx_finish","","",null,null],[5,"hts_idx_save","","",null,null],[5,"hts_idx_load","","",null,null],[5,"hts_idx_get_meta","","",null,null],[5,"hts_idx_set_meta","","",null,null],[5,"hts_idx_get_stat","","",null,null],[5,"hts_idx_get_n_no_coor","","",null,null],[5,"hts_parse_reg","","",null,null],[5,"hts_itr_query","","",null,null],[5,"hts_itr_destroy","","",null,null],[5,"hts_itr_querys","","",null,null],[5,"hts_itr_next","","",null,null],[5,"hts_idx_seqnames","","",null,null],[5,"hts_file_type","","",null,null],[5,"bam_hdr_init","","",null,null],[5,"bam_hdr_read","","",null,null],[5,"bam_hdr_write","","",null,null],[5,"bam_hdr_destroy","","",null,null],[5,"bam_name2id","","",null,null],[5,"bam_hdr_dup","","",null,null],[5,"bam_init1","","",null,null],[5,"bam_destroy1","","",null,null],[5,"bam_read1","","",null,null],[5,"bam_write1","","",null,null],[5,"bam_copy1","","",null,null],[5,"bam_dup1","","",null,null],[5,"bam_cigar2qlen","","",null,null],[5,"bam_cigar2rlen","","",null,null],[5,"bam_endpos","","",null,null],[5,"bam_str2flag","","",null,null],[5,"bam_flag2str","","",null,null],[5,"bam_index_build","","",null,null],[5,"sam_index_load","","",null,null],[5,"sam_itr_queryi","","",null,null],[5,"sam_itr_querys","","",null,null],[5,"sam_open_mode","","",null,null],[5,"sam_hdr_parse","","",null,null],[5,"sam_hdr_read","","",null,null],[5,"sam_hdr_write","","",null,null],[5,"sam_parse1","","",null,null],[5,"sam_format1","","",null,null],[5,"sam_read1","","",null,null],[5,"sam_write1","","",null,null],[5,"bam_aux_get","","",null,null],[5,"bam_aux2i","","",null,null],[5,"bam_aux2f","","",null,null],[5,"bam_aux2A","","",null,null],[5,"bam_aux2Z","","",null,null],[5,"bam_aux_append","","",null,null],[5,"bam_aux_del","","",null,null],[5,"bam_plp_init","","",null,null],[5,"bam_plp_destroy","","",null,null],[5,"bam_plp_push","","",null,null],[5,"bam_plp_next","","",null,null],[5,"bam_plp_auto","","",null,null],[5,"bam_plp_set_maxcnt","","",null,null],[5,"bam_plp_reset","","",null,null],[5,"bam_mplp_init","","",null,null],[5,"bam_mplp_init_overlaps","","",null,null],[5,"bam_mplp_destroy","","",null,null],[5,"bam_mplp_set_maxcnt","","",null,null],[5,"bam_mplp_auto","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"struct___kstring_t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"struct___kstring_t"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"struct_htsformat"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"struct_htsformat"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed1"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"struct_unnamed1"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed2"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"struct_unnamed2"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed3"}}],[11,"bgzf","","",4,null],[11,"cram","","",4,null],[11,"hfile","","",4,null],[11,"voidp","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"union_unnamed3"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed4"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"struct_unnamed4"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed5"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"struct_unnamed5"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed6"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"struct_unnamed6"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed7"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"struct_unnamed7"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed8"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"struct_unnamed8"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed9"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"struct_unnamed9"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed10"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"struct_unnamed10"}}],[0,"vcf","","",null,null],[3,"Struct___kstring_t","rust_htslib::htslib::vcf","",null,null],[12,"l","","",12,null],[12,"m","","",12,null],[12,"s","","",12,null],[3,"Struct_htsFormat","","",null,null],[12,"category","","",13,null],[12,"format","","",13,null],[12,"version","","",13,null],[12,"compression","","",13,null],[12,"compression_level","","",13,null],[12,"specific","","",13,null],[3,"Struct_Unnamed1","","",null,null],[12,"major","","",14,null],[12,"minor","","",14,null],[3,"Struct_Unnamed2","","",null,null],[12,"isbin_isright_isbe_iscram_dummy","","",15,null],[12,"lineno","","",15,null],[12,"line","","",15,null],[12,"_fn","","",15,null],[12,"fn_aux","","",15,null],[12,"fp","","",15,null],[12,"format","","",15,null],[3,"Union_Unnamed3","","",null,null],[12,"_bindgen_data_","","",16,null],[3,"Struct_Unnamed4","","",null,null],[12,"u","","",17,null],[12,"v","","",17,null],[3,"Struct_Unnamed5","","",null,null],[12,"readres_finished_dummy","","",18,null],[12,"tid","","",18,null],[12,"beg","","",18,null],[12,"end","","",18,null],[12,"n_off","","",18,null],[12,"i","","",18,null],[12,"curr_tid","","",18,null],[12,"curr_beg","","",18,null],[12,"curr_end","","",18,null],[12,"curr_off","","",18,null],[12,"off","","",18,null],[12,"readrec","","",18,null],[12,"bins","","",18,null],[3,"Struct_Unnamed6","","",null,null],[12,"n","","",19,null],[12,"m","","",19,null],[12,"a","","",19,null],[3,"Struct_Unnamed7","","",null,null],[12,"__val","","",20,null],[3,"Union_wait","","",null,null],[12,"_bindgen_data_","","",21,null],[3,"Struct_Unnamed8","","",null,null],[12,"_bindgen_bitfield_1_","","",22,null],[3,"Struct_Unnamed9","","",null,null],[12,"_bindgen_bitfield_1_","","",23,null],[3,"Union_Unnamed10","","",null,null],[12,"_bindgen_data_","","",24,null],[3,"Struct_Unnamed11","","",null,null],[12,"quot","","",25,null],[12,"rem","","",25,null],[3,"Struct_Unnamed12","","",null,null],[12,"quot","","",26,null],[12,"rem","","",26,null],[3,"Struct_Unnamed13","","",null,null],[12,"quot","","",27,null],[12,"rem","","",27,null],[3,"Struct_Unnamed14","","",null,null],[12,"__val","","",28,null],[3,"Struct_timespec","","",null,null],[12,"tv_sec","","",29,null],[12,"tv_nsec","","",29,null],[3,"Struct_timeval","","",null,null],[12,"tv_sec","","",30,null],[12,"tv_usec","","",30,null],[3,"Struct_Unnamed15","","",null,null],[12,"__fds_bits","","",31,null],[3,"Union_pthread_attr_t","","",null,null],[12,"_bindgen_data_","","",32,null],[3,"Struct___pthread_internal_list","","",null,null],[12,"__prev","","",33,null],[12,"__next","","",33,null],[3,"Union_Unnamed16","","",null,null],[12,"_bindgen_data_","","",34,null],[3,"Struct___pthread_mutex_s","","",null,null],[12,"__lock","","",35,null],[12,"__count","","",35,null],[12,"__owner","","",35,null],[12,"__nusers","","",35,null],[12,"__kind","","",35,null],[12,"__spins","","",35,null],[12,"__elision","","",35,null],[12,"__list","","",35,null],[3,"Union_Unnamed17","","",null,null],[12,"_bindgen_data_","","",36,null],[3,"Union_Unnamed18","","",null,null],[12,"_bindgen_data_","","",37,null],[3,"Struct_Unnamed19","","",null,null],[12,"__lock","","",38,null],[12,"__futex","","",38,null],[12,"__total_seq","","",38,null],[12,"__wakeup_seq","","",38,null],[12,"__woken_seq","","",38,null],[12,"__mutex","","",38,null],[12,"__nwaiters","","",38,null],[12,"__broadcast_seq","","",38,null],[3,"Union_Unnamed20","","",null,null],[12,"_bindgen_data_","","",39,null],[3,"Union_Unnamed21","","",null,null],[12,"_bindgen_data_","","",40,null],[3,"Struct_Unnamed22","","",null,null],[12,"__lock","","",41,null],[12,"__nr_readers","","",41,null],[12,"__readers_wakeup","","",41,null],[12,"__writer_wakeup","","",41,null],[12,"__nr_readers_queued","","",41,null],[12,"__nr_writers_queued","","",41,null],[12,"__writer","","",41,null],[12,"__shared","","",41,null],[12,"__pad1","","",41,null],[12,"__pad2","","",41,null],[12,"__flags","","",41,null],[3,"Union_Unnamed23","","",null,null],[12,"_bindgen_data_","","",42,null],[3,"Union_Unnamed24","","",null,null],[12,"_bindgen_data_","","",43,null],[3,"Union_Unnamed25","","",null,null],[12,"_bindgen_data_","","",44,null],[3,"Struct_random_data","","",null,null],[12,"fptr","","",45,null],[12,"rptr","","",45,null],[12,"state","","",45,null],[12,"rand_type","","",45,null],[12,"rand_deg","","",45,null],[12,"rand_sep","","",45,null],[12,"end_ptr","","",45,null],[3,"Struct_drand48_data","","",null,null],[12,"__x","","",46,null],[12,"__old_x","","",46,null],[12,"__c","","",46,null],[12,"__init","","",46,null],[12,"__a","","",46,null],[3,"Struct___locale_struct","","",null,null],[12,"__locales","","",47,null],[12,"__ctype_b","","",47,null],[12,"__ctype_tolower","","",47,null],[12,"__ctype_toupper","","",47,null],[12,"__names","","",47,null],[3,"Struct_Unnamed26","","",null,null],[12,"__count","","",48,null],[12,"__value","","",48,null],[3,"Union_Unnamed27","","",null,null],[12,"_bindgen_data_","","",49,null],[3,"Struct_Unnamed28","","",null,null],[12,"__pos","","",50,null],[12,"__state","","",50,null],[3,"Struct_Unnamed29","","",null,null],[12,"__pos","","",51,null],[12,"__state","","",51,null],[3,"Struct__IO_marker","","",null,null],[12,"_next","","",52,null],[12,"_sbuf","","",52,null],[12,"_pos","","",52,null],[3,"Struct__IO_FILE","","",null,null],[12,"_flags","","",53,null],[12,"_IO_read_ptr","","",53,null],[12,"_IO_read_end","","",53,null],[12,"_IO_read_base","","",53,null],[12,"_IO_write_base","","",53,null],[12,"_IO_write_ptr","","",53,null],[12,"_IO_write_end","","",53,null],[12,"_IO_buf_base","","",53,null],[12,"_IO_buf_end","","",53,null],[12,"_IO_save_base","","",53,null],[12,"_IO_backup_base","","",53,null],[12,"_IO_save_end","","",53,null],[12,"_markers","","",53,null],[12,"_chain","","",53,null],[12,"_fileno","","",53,null],[12,"_flags2","","",53,null],[12,"_old_offset","","",53,null],[12,"_cur_column","","",53,null],[12,"_vtable_offset","","",53,null],[12,"_shortbuf","","",53,null],[12,"_lock","","",53,null],[12,"_offset","","",53,null],[12,"__pad1","","",53,null],[12,"__pad2","","",53,null],[12,"__pad3","","",53,null],[12,"__pad4","","",53,null],[12,"__pad5","","",53,null],[12,"_mode","","",53,null],[12,"_unused2","","",53,null],[3,"Struct_Unnamed30","","",null,null],[12,"tab","","",54,null],[12,"sep","","",54,null],[12,"finished","","",54,null],[12,"p","","",54,null],[3,"Struct_Unnamed31","","",null,null],[12,"_type","","",55,null],[12,"key","","",55,null],[12,"value","","",55,null],[12,"nkeys","","",55,null],[12,"keys","","",55,null],[12,"vals","","",55,null],[3,"Struct_Unnamed32","","",null,null],[12,"info","","",56,null],[12,"hrec","","",56,null],[12,"id","","",56,null],[3,"Struct_Unnamed33","","",null,null],[12,"key","","",57,null],[12,"val","","",57,null],[3,"Struct_Unnamed34","","",null,null],[12,"n","","",58,null],[12,"id","","",58,null],[12,"dict","","",58,null],[12,"samples","","",58,null],[12,"hrec","","",58,null],[12,"nhrec","","",58,null],[12,"dirty","","",58,null],[12,"ntransl","","",58,null],[12,"transl","","",58,null],[12,"nsamples_ori","","",58,null],[12,"keep_samples","","",58,null],[12,"mem","","",58,null],[3,"Struct_Unnamed35","","",null,null],[12,"_type","","",59,null],[12,"n","","",59,null],[3,"Struct_Unnamed36","","",null,null],[12,"id","","",60,null],[12,"n","","",60,null],[12,"size","","",60,null],[12,"_type","","",60,null],[12,"p","","",60,null],[12,"p_len","","",60,null],[12,"p_off_p_free","","",60,null],[3,"Struct_Unnamed37","","",null,null],[12,"key","","",61,null],[12,"_type","","",61,null],[12,"len","","",61,null],[12,"v1","","",61,null],[12,"vptr","","",61,null],[12,"vptr_len","","",61,null],[12,"vptr_off_vptr_free","","",61,null],[3,"Union_Unnamed38","","",null,null],[12,"_bindgen_data_","","",62,null],[3,"Struct_Unnamed39","","",null,null],[12,"m_fmt","","",63,null],[12,"m_info","","",63,null],[12,"m_id","","",63,null],[12,"m_als","","",63,null],[12,"m_allele","","",63,null],[12,"m_flt","","",63,null],[12,"n_flt","","",63,null],[12,"flt","","",63,null],[12,"id","","",63,null],[12,"als","","",63,null],[12,"allele","","",63,null],[12,"info","","",63,null],[12,"fmt","","",63,null],[12,"var","","",63,null],[12,"n_var","","",63,null],[12,"var_type","","",63,null],[12,"shared_dirty","","",63,null],[12,"indiv_dirty","","",63,null],[3,"Struct_Unnamed40","","",null,null],[12,"rid","","",64,null],[12,"pos","","",64,null],[12,"rlen","","",64,null],[12,"qual","","",64,null],[12,"n_info","","",64,null],[12,"n_allele","","",64,null],[12,"n_fmt_n_sample","","",64,null],[12,"shared","","",64,null],[12,"indiv","","",64,null],[12,"d","","",64,null],[12,"max_unpack","","",64,null],[12,"unpacked","","",64,null],[12,"unpack_size","","",64,null],[12,"errcode","","",64,null],[3,"Struct___va_list_tag","","",null,null],[12,"gp_offset","","",65,null],[12,"fp_offset","","",65,null],[12,"overflow_arg_area","","",65,null],[12,"reg_save_area","","",65,null],[4,"Struct_BGZF","","",null,null],[4,"Struct_cram_fd","","",null,null],[4,"Struct_hFILE","","",null,null],[4,"Struct___hts_idx_t","","",null,null],[4,"Struct___locale_data","","",null,null],[4,"Struct__IO_jump_t","","",null,null],[4,"Struct__IO_FILE_plus","","",null,null],[5,"bcf_read1_core","","",null,null],[7,"hts_verbose","","",null,null],[7,"seq_nt16_table","","",null,null],[7,"seq_nt16_str","","",null,null],[7,"seq_nt16_int","","",null,null],[7,"_IO_2_1_stdin_","","",null,null],[7,"_IO_2_1_stdout_","","",null,null],[7,"_IO_2_1_stderr_","","",null,null],[7,"stdin","","",null,null],[7,"stdout","","",null,null],[7,"stderr","","",null,null],[7,"sys_nerr","","",null,null],[7,"sys_errlist","","",null,null],[7,"bcf_type_shift","","",null,null],[7,"bcf_float_vector_end","","",null,null],[7,"bcf_float_missing","","",null,null],[5,"__assert_fail","","",null,null],[5,"__assert_perror_fail","","",null,null],[5,"__assert","","",null,null],[5,"hts_version","","",null,null],[5,"hts_detect_format","","",null,null],[5,"hts_format_description","","",null,null],[5,"hts_open","","",null,null],[5,"hts_hopen","","",null,null],[5,"hts_close","","",null,null],[5,"hts_get_format","","",null,null],[5,"hts_set_opt","","",null,null],[5,"hts_getline","","",null,null],[5,"hts_readlines","","",null,null],[5,"hts_readlist","","",null,null],[5,"hts_set_threads","","",null,null],[5,"hts_set_fai_filename","","",null,null],[5,"hts_idx_init","","",null,null],[5,"hts_idx_destroy","","",null,null],[5,"hts_idx_push","","",null,null],[5,"hts_idx_finish","","",null,null],[5,"hts_idx_save","","",null,null],[5,"hts_idx_load","","",null,null],[5,"hts_idx_get_meta","","",null,null],[5,"hts_idx_set_meta","","",null,null],[5,"hts_idx_get_stat","","",null,null],[5,"hts_idx_get_n_no_coor","","",null,null],[5,"hts_parse_reg","","",null,null],[5,"hts_itr_query","","",null,null],[5,"hts_itr_destroy","","",null,null],[5,"hts_itr_querys","","",null,null],[5,"hts_itr_next","","",null,null],[5,"hts_idx_seqnames","","",null,null],[5,"hts_file_type","","",null,null],[5,"__ctype_get_mb_cur_max","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"atol","","",null,null],[5,"atoll","","",null,null],[5,"strtod","","",null,null],[5,"strtof","","",null,null],[5,"strtold","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"strtoq","","",null,null],[5,"strtouq","","",null,null],[5,"strtoll","","",null,null],[5,"strtoull","","",null,null],[5,"l64a","","",null,null],[5,"a64l","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"gnu_dev_major","","",null,null],[5,"gnu_dev_minor","","",null,null],[5,"gnu_dev_makedev","","",null,null],[5,"random","","",null,null],[5,"srandom","","",null,null],[5,"initstate","","",null,null],[5,"setstate","","",null,null],[5,"random_r","","",null,null],[5,"srandom_r","","",null,null],[5,"initstate_r","","",null,null],[5,"setstate_r","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"rand_r","","",null,null],[5,"drand48","","",null,null],[5,"erand48","","",null,null],[5,"lrand48","","",null,null],[5,"nrand48","","",null,null],[5,"mrand48","","",null,null],[5,"jrand48","","",null,null],[5,"srand48","","",null,null],[5,"seed48","","",null,null],[5,"lcong48","","",null,null],[5,"drand48_r","","",null,null],[5,"erand48_r","","",null,null],[5,"lrand48_r","","",null,null],[5,"nrand48_r","","",null,null],[5,"mrand48_r","","",null,null],[5,"jrand48_r","","",null,null],[5,"srand48_r","","",null,null],[5,"seed48_r","","",null,null],[5,"lcong48_r","","",null,null],[5,"malloc","","",null,null],[5,"calloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"cfree","","",null,null],[5,"alloca","","",null,null],[5,"valloc","","",null,null],[5,"posix_memalign","","",null,null],[5,"abort","","",null,null],[5,"atexit","","",null,null],[5,"on_exit","","",null,null],[5,"exit","","",null,null],[5,"_Exit","","",null,null],[5,"getenv","","",null,null],[5,"putenv","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"clearenv","","",null,null],[5,"mktemp","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"system","","",null,null],[5,"realpath","","",null,null],[5,"bsearch","","",null,null],[5,"qsort","","",null,null],[5,"abs","","",null,null],[5,"labs","","",null,null],[5,"llabs","","",null,null],[5,"div","","",null,null],[5,"ldiv","","",null,null],[5,"lldiv","","",null,null],[5,"ecvt","","",null,null],[5,"fcvt","","",null,null],[5,"gcvt","","",null,null],[5,"qecvt","","",null,null],[5,"qfcvt","","",null,null],[5,"qgcvt","","",null,null],[5,"ecvt_r","","",null,null],[5,"fcvt_r","","",null,null],[5,"qecvt_r","","",null,null],[5,"qfcvt_r","","",null,null],[5,"mblen","","",null,null],[5,"mbtowc","","",null,null],[5,"wctomb","","",null,null],[5,"mbstowcs","","",null,null],[5,"wcstombs","","",null,null],[5,"rpmatch","","",null,null],[5,"getsubopt","","",null,null],[5,"getloadavg","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memccpy","","",null,null],[5,"memset","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strxfrm","","",null,null],[5,"strcoll_l","","",null,null],[5,"strxfrm_l","","",null,null],[5,"strdup","","",null,null],[5,"strndup","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strcspn","","",null,null],[5,"strspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strtok","","",null,null],[5,"__strtok_r","","",null,null],[5,"strtok_r","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strerror_r","","",null,null],[5,"strerror_l","","",null,null],[5,"__bzero","","",null,null],[5,"bcopy","","",null,null],[5,"bzero","","",null,null],[5,"bcmp","","",null,null],[5,"index","","",null,null],[5,"rindex","","",null,null],[5,"ffs","","",null,null],[5,"strcasecmp","","",null,null],[5,"strncasecmp","","",null,null],[5,"strsep","","",null,null],[5,"strsignal","","",null,null],[5,"__stpcpy","","",null,null],[5,"stpcpy","","",null,null],[5,"__stpncpy","","",null,null],[5,"stpncpy","","",null,null],[5,"__underflow","","",null,null],[5,"__uflow","","",null,null],[5,"__overflow","","",null,null],[5,"_IO_getc","","",null,null],[5,"_IO_putc","","",null,null],[5,"_IO_feof","","",null,null],[5,"_IO_ferror","","",null,null],[5,"_IO_peekc_locked","","",null,null],[5,"_IO_flockfile","","",null,null],[5,"_IO_funlockfile","","",null,null],[5,"_IO_ftrylockfile","","",null,null],[5,"_IO_vfscanf","","",null,null],[5,"_IO_vfprintf","","",null,null],[5,"_IO_padn","","",null,null],[5,"_IO_sgetn","","",null,null],[5,"_IO_seekoff","","",null,null],[5,"_IO_seekpos","","",null,null],[5,"_IO_free_backup_area","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"renameat","","",null,null],[5,"tmpfile","","",null,null],[5,"tmpnam","","",null,null],[5,"tmpnam_r","","",null,null],[5,"tempnam","","",null,null],[5,"fclose","","",null,null],[5,"fflush","","",null,null],[5,"fflush_unlocked","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fdopen","","",null,null],[5,"fmemopen","","",null,null],[5,"open_memstream","","",null,null],[5,"setbuf","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuffer","","",null,null],[5,"setlinebuf","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"sprintf","","",null,null],[5,"vfprintf","","",null,null],[5,"vprintf","","",null,null],[5,"vsprintf","","",null,null],[5,"snprintf","","",null,null],[5,"vsnprintf","","",null,null],[5,"vdprintf","","",null,null],[5,"dprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"vfscanf","","",null,null],[5,"vscanf","","",null,null],[5,"vsscanf","","",null,null],[5,"fgetc","","",null,null],[5,"getc","","",null,null],[5,"getchar","","",null,null],[5,"getc_unlocked","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"fgetc_unlocked","","",null,null],[5,"fputc","","",null,null],[5,"putc","","",null,null],[5,"putchar","","",null,null],[5,"fputc_unlocked","","",null,null],[5,"putc_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"getw","","",null,null],[5,"putw","","",null,null],[5,"fgets","","",null,null],[5,"gets","","",null,null],[5,"__getdelim","","",null,null],[5,"getdelim","","",null,null],[5,"getline","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fread_unlocked","","",null,null],[5,"fwrite_unlocked","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"clearerr","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"clearerr_unlocked","","",null,null],[5,"feof_unlocked","","",null,null],[5,"ferror_unlocked","","",null,null],[5,"perror","","",null,null],[5,"fileno","","",null,null],[5,"fileno_unlocked","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"ctermid","","",null,null],[5,"flockfile","","",null,null],[5,"ftrylockfile","","",null,null],[5,"funlockfile","","",null,null],[5,"kvsprintf","","",null,null],[5,"ksprintf","","",null,null],[5,"ksplit_core","","",null,null],[5,"kstrstr","","",null,null],[5,"kstrnstr","","",null,null],[5,"kmemmem","","",null,null],[5,"kstrtok","","",null,null],[5,"bcf_hdr_init","","",null,null],[5,"bcf_hdr_destroy","","",null,null],[5,"bcf_init","","",null,null],[5,"bcf_destroy","","",null,null],[5,"bcf_empty","","",null,null],[5,"bcf_clear","","",null,null],[5,"bcf_hdr_read","","",null,null],[5,"bcf_hdr_set_samples","","",null,null],[5,"bcf_subset_format","","",null,null],[5,"bcf_hdr_write","","",null,null],[5,"vcf_parse","","",null,null],[5,"vcf_format","","",null,null],[5,"bcf_read","","",null,null],[5,"bcf_unpack","","",null,null],[5,"bcf_dup","","",null,null],[5,"bcf_copy","","",null,null],[5,"bcf_write","","",null,null],[5,"vcf_hdr_read","","",null,null],[5,"vcf_hdr_write","","",null,null],[5,"vcf_read","","",null,null],[5,"vcf_write","","",null,null],[5,"bcf_readrec","","",null,null],[5,"bcf_hdr_dup","","",null,null],[5,"bcf_hdr_combine","","",null,null],[5,"bcf_hdr_add_sample","","",null,null],[5,"bcf_hdr_set","","",null,null],[5,"bcf_hdr_fmt_text","","",null,null],[5,"bcf_hdr_append","","",null,null],[5,"bcf_hdr_printf","","",null,null],[5,"bcf_hdr_get_version","","",null,null],[5,"bcf_hdr_set_version","","",null,null],[5,"bcf_hdr_remove","","",null,null],[5,"bcf_hdr_subset","","",null,null],[5,"bcf_hdr_seqnames","","",null,null],[5,"bcf_hdr_parse","","",null,null],[5,"bcf_hdr_sync","","",null,null],[5,"bcf_hdr_parse_line","","",null,null],[5,"bcf_hrec_format","","",null,null],[5,"bcf_hdr_add_hrec","","",null,null],[5,"bcf_hdr_get_hrec","","",null,null],[5,"bcf_hrec_dup","","",null,null],[5,"bcf_hrec_add_key","","",null,null],[5,"bcf_hrec_set_val","","",null,null],[5,"bcf_hrec_find_key","","",null,null],[5,"hrec_add_idx","","",null,null],[5,"bcf_hrec_destroy","","",null,null],[5,"bcf_subset","","",null,null],[5,"bcf_translate","","",null,null],[5,"bcf_get_variant_types","","",null,null],[5,"bcf_get_variant_type","","",null,null],[5,"bcf_is_snp","","",null,null],[5,"bcf_update_filter","","",null,null],[5,"bcf_add_filter","","",null,null],[5,"bcf_remove_filter","","",null,null],[5,"bcf_has_filter","","",null,null],[5,"bcf_update_alleles","","",null,null],[5,"bcf_update_alleles_str","","",null,null],[5,"bcf_update_id","","",null,null],[5,"bcf_update_info","","",null,null],[5,"bcf_update_format_string","","",null,null],[5,"bcf_update_format","","",null,null],[5,"bcf_get_fmt","","",null,null],[5,"bcf_get_info","","",null,null],[5,"bcf_get_fmt_id","","",null,null],[5,"bcf_get_info_id","","",null,null],[5,"bcf_get_info_values","","",null,null],[5,"bcf_get_format_string","","",null,null],[5,"bcf_get_format_values","","",null,null],[5,"bcf_hdr_id2int","","",null,null],[5,"bcf_fmt_array","","",null,null],[5,"bcf_fmt_sized_array","","",null,null],[5,"bcf_enc_vchar","","",null,null],[5,"bcf_enc_vint","","",null,null],[5,"bcf_enc_vfloat","","",null,null],[5,"bcf_index_build","","",null,null],[6,"__int128_t","","",null,null],[6,"__uint128_t","","",null,null],[6,"__builtin_va_list","","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"int_least8_t","","",null,null],[6,"int_least16_t","","",null,null],[6,"int_least32_t","","",null,null],[6,"int_least64_t","","",null,null],[6,"uint_least8_t","","",null,null],[6,"uint_least16_t","","",null,null],[6,"uint_least32_t","","",null,null],[6,"uint_least64_t","","",null,null],[6,"int_fast8_t","","",null,null],[6,"int_fast16_t","","",null,null],[6,"int_fast32_t","","",null,null],[6,"int_fast64_t","","",null,null],[6,"uint_fast8_t","","",null,null],[6,"uint_fast16_t","","",null,null],[6,"uint_fast32_t","","",null,null],[6,"uint_fast64_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"size_t","","",null,null],[6,"wchar_t","","",null,null],[6,"BGZF","","",null,null],[6,"kstring_t","","",null,null],[6,"Enum_htsFormatCategory","","",null,null],[6,"Enum_htsExactFormat","","",null,null],[6,"Enum_htsCompression","","",null,null],[6,"htsFormat","","",null,null],[6,"htsFile","","",null,null],[6,"Enum_sam_fields","","",null,null],[6,"Enum_cram_option","","",null,null],[6,"hts_idx_t","","",null,null],[6,"hts_pair64_t","","",null,null],[6,"hts_readrec_func","","",null,null],[6,"hts_itr_t","","",null,null],[6,"hts_name2id_f","","",null,null],[6,"hts_id2name_f","","",null,null],[6,"hts_itr_query_func","","",null,null],[6,"__u_char","","",null,null],[6,"__u_short","","",null,null],[6,"__u_int","","",null,null],[6,"__u_long","","",null,null],[6,"__int8_t","","",null,null],[6,"__uint8_t","","",null,null],[6,"__int16_t","","",null,null],[6,"__uint16_t","","",null,null],[6,"__int32_t","","",null,null],[6,"__uint32_t","","",null,null],[6,"__int64_t","","",null,null],[6,"__uint64_t","","",null,null],[6,"__quad_t","","",null,null],[6,"__u_quad_t","","",null,null],[6,"__dev_t","","",null,null],[6,"__uid_t","","",null,null],[6,"__gid_t","","",null,null],[6,"__ino_t","","",null,null],[6,"__ino64_t","","",null,null],[6,"__mode_t","","",null,null],[6,"__nlink_t","","",null,null],[6,"__off_t","","",null,null],[6,"__off64_t","","",null,null],[6,"__pid_t","","",null,null],[6,"__fsid_t","","",null,null],[6,"__clock_t","","",null,null],[6,"__rlim_t","","",null,null],[6,"__rlim64_t","","",null,null],[6,"__id_t","","",null,null],[6,"__time_t","","",null,null],[6,"__useconds_t","","",null,null],[6,"__suseconds_t","","",null,null],[6,"__daddr_t","","",null,null],[6,"__key_t","","",null,null],[6,"__clockid_t","","",null,null],[6,"__timer_t","","",null,null],[6,"__blksize_t","","",null,null],[6,"__blkcnt_t","","",null,null],[6,"__blkcnt64_t","","",null,null],[6,"__fsblkcnt_t","","",null,null],[6,"__fsblkcnt64_t","","",null,null],[6,"__fsfilcnt_t","","",null,null],[6,"__fsfilcnt64_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"__ssize_t","","",null,null],[6,"__syscall_slong_t","","",null,null],[6,"__syscall_ulong_t","","",null,null],[6,"__loff_t","","",null,null],[6,"__qaddr_t","","",null,null],[6,"__caddr_t","","",null,null],[6,"__intptr_t","","",null,null],[6,"__socklen_t","","",null,null],[6,"__WAIT_STATUS","","",null,null],[6,"div_t","","",null,null],[6,"ldiv_t","","",null,null],[6,"lldiv_t","","",null,null],[6,"u_char","","",null,null],[6,"u_short","","",null,null],[6,"u_int","","",null,null],[6,"u_long","","",null,null],[6,"quad_t","","",null,null],[6,"u_quad_t","","",null,null],[6,"fsid_t","","",null,null],[6,"loff_t","","",null,null],[6,"ino_t","","",null,null],[6,"dev_t","","",null,null],[6,"gid_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"uid_t","","",null,null],[6,"off_t","","",null,null],[6,"pid_t","","",null,null],[6,"id_t","","",null,null],[6,"ssize_t","","",null,null],[6,"daddr_t","","",null,null],[6,"caddr_t","","",null,null],[6,"key_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"clockid_t","","",null,null],[6,"timer_t","","",null,null],[6,"ulong","","",null,null],[6,"ushort","","",null,null],[6,"_uint","","",null,null],[6,"u_int8_t","","",null,null],[6,"u_int16_t","","",null,null],[6,"u_int32_t","","",null,null],[6,"u_int64_t","","",null,null],[6,"register_t","","",null,null],[6,"__sig_atomic_t","","",null,null],[6,"__sigset_t","","",null,null],[6,"sigset_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__fd_mask","","",null,null],[6,"fd_set","","",null,null],[6,"fd_mask","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"pthread_t","","",null,null],[6,"pthread_attr_t","","",null,null],[6,"__pthread_list_t","","",null,null],[6,"pthread_mutex_t","","",null,null],[6,"pthread_mutexattr_t","","",null,null],[6,"pthread_cond_t","","",null,null],[6,"pthread_condattr_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"pthread_once_t","","",null,null],[6,"pthread_rwlock_t","","",null,null],[6,"pthread_rwlockattr_t","","",null,null],[6,"pthread_spinlock_t","","",null,null],[6,"pthread_barrier_t","","",null,null],[6,"pthread_barrierattr_t","","",null,null],[6,"__compar_fn_t","","",null,null],[6,"__locale_t","","",null,null],[6,"locale_t","","",null,null],[6,"__gnuc_va_list","","",null,null],[6,"va_list","","",null,null],[6,"FILE","","",null,null],[6,"__FILE","","",null,null],[6,"__mbstate_t","","",null,null],[6,"_G_fpos_t","","",null,null],[6,"_G_fpos64_t","","",null,null],[6,"_IO_lock_t","","",null,null],[6,"Enum___codecvt_result","","",null,null],[6,"_IO_FILE","","",null,null],[6,"__io_read_fn","","",null,null],[6,"__io_write_fn","","",null,null],[6,"__io_seek_fn","","",null,null],[6,"__io_close_fn","","",null,null],[6,"fpos_t","","",null,null],[6,"ks_tokaux_t","","",null,null],[6,"bcf_hrec_t","","",null,null],[6,"bcf_idinfo_t","","",null,null],[6,"bcf_idpair_t","","",null,null],[6,"bcf_hdr_t","","",null,null],[6,"variant_t","","",null,null],[6,"bcf_fmt_t","","",null,null],[6,"bcf_info_t","","",null,null],[6,"bcf_dec_t","","",null,null],[6,"bcf1_t","","",null,null],[6,"vcfFile","","",null,null],[6,"__va_list_tag","","",null,null],[17,"BCF_HL_FLT","","",null,null],[17,"BCF_HL_INFO","","",null,null],[17,"BCF_HL_FMT","","",null,null],[17,"BCF_HL_CTG","","",null,null],[17,"BCF_HL_STR","","",null,null],[17,"BCF_HL_GEN","","",null,null],[17,"BCF_HT_FLAG","","",null,null],[17,"BCF_HT_INT","","",null,null],[17,"BCF_HT_REAL","","",null,null],[17,"BCF_HT_STR","","",null,null],[17,"BCF_UN_STR","","",null,null],[17,"BCF_UN_FLT","","",null,null],[17,"BCF_DT_ID","","",null,null],[17,"BCF_DT_CTG","","",null,null],[17,"BCF_DT_SAMPLE","","",null,null],[17,"BCF_VL_FIXED","","",null,null],[17,"BCF_VL_VAR","","",null,null],[17,"BCF_VL_A","","",null,null],[17,"BCF_VL_G","","",null,null],[17,"BCF_VL_R","","",null,null],[17,"unknown_category","","",null,null],[17,"sequence_data","","",null,null],[17,"variant_data","","",null,null],[17,"index_file","","",null,null],[17,"region_list","","",null,null],[17,"category_maximum","","",null,null],[17,"unknown_format","","",null,null],[17,"binary_format","","",null,null],[17,"text_format","","",null,null],[17,"sam","","",null,null],[17,"bam","","",null,null],[17,"bai","","",null,null],[17,"cram","","",null,null],[17,"crai","","",null,null],[17,"vcf","","",null,null],[17,"bcf","","",null,null],[17,"csi","","",null,null],[17,"gzi","","",null,null],[17,"tbi","","",null,null],[17,"bed","","",null,null],[17,"format_maximum","","",null,null],[17,"no_compression","","",null,null],[17,"gzip","","",null,null],[17,"bgzf","","",null,null],[17,"custom","","",null,null],[17,"compression_maximum","","",null,null],[17,"SAM_QNAME","","",null,null],[17,"SAM_FLAG","","",null,null],[17,"SAM_RNAME","","",null,null],[17,"SAM_POS","","",null,null],[17,"SAM_MAPQ","","",null,null],[17,"SAM_CIGAR","","",null,null],[17,"SAM_RNEXT","","",null,null],[17,"SAM_PNEXT","","",null,null],[17,"SAM_TLEN","","",null,null],[17,"SAM_SEQ","","",null,null],[17,"SAM_QUAL","","",null,null],[17,"SAM_AUX","","",null,null],[17,"SAM_RGAUX","","",null,null],[17,"CRAM_OPT_DECODE_MD","","",null,null],[17,"CRAM_OPT_PREFIX","","",null,null],[17,"CRAM_OPT_VERBOSITY","","",null,null],[17,"CRAM_OPT_SEQS_PER_SLICE","","",null,null],[17,"CRAM_OPT_SLICES_PER_CONTAINER","","",null,null],[17,"CRAM_OPT_RANGE","","",null,null],[17,"CRAM_OPT_VERSION","","",null,null],[17,"CRAM_OPT_EMBED_REF","","",null,null],[17,"CRAM_OPT_IGNORE_MD5","","",null,null],[17,"CRAM_OPT_REFERENCE","","",null,null],[17,"CRAM_OPT_MULTI_SEQ_PER_SLICE","","",null,null],[17,"CRAM_OPT_NO_REF","","",null,null],[17,"CRAM_OPT_USE_BZIP2","","",null,null],[17,"CRAM_OPT_SHARED_REF","","",null,null],[17,"CRAM_OPT_NTHREADS","","",null,null],[17,"CRAM_OPT_THREAD_POOL","","",null,null],[17,"CRAM_OPT_USE_LZMA","","",null,null],[17,"CRAM_OPT_USE_RANS","","",null,null],[17,"CRAM_OPT_REQUIRED_FIELDS","","",null,null],[17,"__codecvt_ok","","",null,null],[17,"__codecvt_partial","","",null,null],[17,"__codecvt_error","","",null,null],[17,"__codecvt_noconv","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"struct___kstring_t"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"struct___kstring_t"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"struct_htsformat"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"struct_htsformat"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed1"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"struct_unnamed1"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed2"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"struct_unnamed2"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed3"}}],[11,"bgzf","","",16,null],[11,"cram","","",16,null],[11,"hfile","","",16,null],[11,"voidp","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"union_unnamed3"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed4"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"struct_unnamed4"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed5"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"struct_unnamed5"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed6"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"struct_unnamed6"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed7"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"struct_unnamed7"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"union_wait"}}],[11,"w_status","","",21,null],[11,"__wait_terminated","","",21,null],[11,"__wait_stopped","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"union_wait"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed8"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"struct_unnamed8"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed9"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"struct_unnamed9"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed10"}}],[11,"__uptr","","",24,null],[11,"__iptr","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"union_unnamed10"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed11"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"struct_unnamed11"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed12"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"struct_unnamed12"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed13"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"struct_unnamed13"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed14"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"struct_unnamed14"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"struct_timespec"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"struct_timespec"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"struct_timeval"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"struct_timeval"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed15"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"struct_unnamed15"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"union_pthread_attr_t"}}],[11,"__size","","",32,null],[11,"__align","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"union_pthread_attr_t"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"struct___pthread_internal_list"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"struct___pthread_internal_list"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed16"}}],[11,"__data","","",34,null],[11,"__size","","",34,null],[11,"__align","","",34,null],[11,"default","","",34,{"inputs":[],"output":{"name":"union_unnamed16"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"struct___pthread_mutex_s"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"struct___pthread_mutex_s"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed17"}}],[11,"__size","","",36,null],[11,"__align","","",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"union_unnamed17"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed18"}}],[11,"__data","","",37,null],[11,"__size","","",37,null],[11,"__align","","",37,null],[11,"default","","",37,{"inputs":[],"output":{"name":"union_unnamed18"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed19"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"struct_unnamed19"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed20"}}],[11,"__size","","",39,null],[11,"__align","","",39,null],[11,"default","","",39,{"inputs":[],"output":{"name":"union_unnamed20"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed21"}}],[11,"__data","","",40,null],[11,"__size","","",40,null],[11,"__align","","",40,null],[11,"default","","",40,{"inputs":[],"output":{"name":"union_unnamed21"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed22"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"struct_unnamed22"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed23"}}],[11,"__size","","",42,null],[11,"__align","","",42,null],[11,"default","","",42,{"inputs":[],"output":{"name":"union_unnamed23"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed24"}}],[11,"__size","","",43,null],[11,"__align","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"union_unnamed24"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed25"}}],[11,"__size","","",44,null],[11,"__align","","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"union_unnamed25"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"struct_random_data"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"struct_random_data"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"struct_drand48_data"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"struct_drand48_data"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"struct___locale_struct"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"struct___locale_struct"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed26"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"struct_unnamed26"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed27"}}],[11,"__wch","","",49,null],[11,"__wchb","","",49,null],[11,"default","","",49,{"inputs":[],"output":{"name":"union_unnamed27"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed28"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"struct_unnamed28"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed29"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"struct_unnamed29"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"struct__io_marker"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"struct__io_marker"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"struct__io_file"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"struct__io_file"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed30"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"struct_unnamed30"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed31"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"struct_unnamed31"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed32"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"struct_unnamed32"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed33"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"struct_unnamed33"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed34"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"struct_unnamed34"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed35"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"struct_unnamed35"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed36"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"struct_unnamed36"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed37"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"struct_unnamed37"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"union_unnamed38"}}],[11,"i","","",62,null],[11,"f","","",62,null],[11,"default","","",62,{"inputs":[],"output":{"name":"union_unnamed38"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed39"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"struct_unnamed39"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"struct_unnamed40"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"struct_unnamed40"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"struct___va_list_tag"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"struct___va_list_tag"}}],[0,"vcfutils","rust_htslib::htslib","",null,null],[5,"bcf_trim_alleles","rust_htslib::htslib::vcfutils","",null,null],[6,"BGZF","rust_htslib::htslib","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"int_least8_t","","",null,null],[6,"int_least16_t","","",null,null],[6,"int_least32_t","","",null,null],[6,"int_least64_t","","",null,null],[6,"uint_least8_t","","",null,null],[6,"uint_least16_t","","",null,null],[6,"uint_least32_t","","",null,null],[6,"uint_least64_t","","",null,null],[6,"int_fast8_t","","",null,null],[6,"int_fast16_t","","",null,null],[6,"int_fast32_t","","",null,null],[6,"int_fast64_t","","",null,null],[6,"uint_fast8_t","","",null,null],[6,"uint_fast16_t","","",null,null],[6,"uint_fast32_t","","",null,null],[6,"uint_fast64_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"size_t","","",null,null],[6,"wchar_t","","",null,null],[6,"kstring_t","","",null,null],[6,"Enum_htsFormatCategory","","",null,null],[6,"Enum_htsExactFormat","","",null,null],[6,"Enum_htsCompression","","",null,null],[6,"htsFormat","","",null,null],[6,"htsFile","","",null,null],[6,"Enum_sam_fields","","",null,null],[6,"Enum_cram_option","","",null,null],[6,"hts_idx_t","","",null,null],[6,"hts_pair64_t","","",null,null],[6,"hts_readrec_func","","",null,null],[6,"hts_itr_t","","",null,null],[6,"hts_name2id_f","","",null,null],[6,"hts_id2name_f","","",null,null],[6,"hts_itr_query_func","","",null,null],[6,"bam_hdr_t","","",null,null],[6,"bam1_core_t","","",null,null],[6,"bam1_t","","",null,null],[6,"samFile","","",null,null],[6,"bam_pileup1_t","","",null,null],[6,"bam_plp_auto_f","","",null,null],[6,"bam_plp_t","","",null,null],[6,"bam_mplp_t","","",null,null],[17,"HTS_FMT_BAI","","",null,null],[17,"unknown_category","","",null,null],[17,"sequence_data","","",null,null],[17,"variant_data","","",null,null],[17,"index_file","","",null,null],[17,"region_list","","",null,null],[17,"category_maximum","","",null,null],[17,"unknown_format","","",null,null],[17,"binary_format","","",null,null],[17,"text_format","","",null,null],[17,"sam","","",null,null],[17,"bam","","",null,null],[17,"bai","","",null,null],[17,"cram","","",null,null],[17,"crai","","",null,null],[17,"vcf","","",null,null],[17,"bcf","","",null,null],[17,"csi","","",null,null],[17,"gzi","","",null,null],[17,"tbi","","",null,null],[17,"bed","","",null,null],[17,"format_maximum","","",null,null],[17,"no_compression","","",null,null],[17,"gzip","","",null,null],[17,"bgzf","","",null,null],[17,"custom","","",null,null],[17,"compression_maximum","","",null,null],[17,"SAM_QNAME","","",null,null],[17,"SAM_FLAG","","",null,null],[17,"SAM_RNAME","","",null,null],[17,"SAM_POS","","",null,null],[17,"SAM_MAPQ","","",null,null],[17,"SAM_CIGAR","","",null,null],[17,"SAM_RNEXT","","",null,null],[17,"SAM_PNEXT","","",null,null],[17,"SAM_TLEN","","",null,null],[17,"SAM_SEQ","","",null,null],[17,"SAM_QUAL","","",null,null],[17,"SAM_AUX","","",null,null],[17,"SAM_RGAUX","","",null,null],[17,"CRAM_OPT_DECODE_MD","","",null,null],[17,"CRAM_OPT_PREFIX","","",null,null],[17,"CRAM_OPT_VERBOSITY","","",null,null],[17,"CRAM_OPT_SEQS_PER_SLICE","","",null,null],[17,"CRAM_OPT_SLICES_PER_CONTAINER","","",null,null],[17,"CRAM_OPT_RANGE","","",null,null],[17,"CRAM_OPT_VERSION","","",null,null],[17,"CRAM_OPT_EMBED_REF","","",null,null],[17,"CRAM_OPT_IGNORE_MD5","","",null,null],[17,"CRAM_OPT_REFERENCE","","",null,null],[17,"CRAM_OPT_MULTI_SEQ_PER_SLICE","","",null,null],[17,"CRAM_OPT_NO_REF","","",null,null],[17,"CRAM_OPT_USE_BZIP2","","",null,null],[17,"CRAM_OPT_SHARED_REF","","",null,null],[17,"CRAM_OPT_NTHREADS","","",null,null],[17,"CRAM_OPT_THREAD_POOL","","",null,null],[17,"CRAM_OPT_USE_LZMA","","",null,null],[17,"CRAM_OPT_USE_RANS","","",null,null],[17,"CRAM_OPT_REQUIRED_FIELDS","","",null,null],[0,"bam","rust_htslib","",null,null],[3,"Reader","rust_htslib::bam","A BAM reader.",null,null],[3,"IndexedReader","","",null,null],[12,"header","","",66,null],[3,"Writer","","A BAM writer.",null,null],[3,"Records","","Iterator over the records of a BAM.",null,null],[3,"HeaderView","","",null,null],[4,"ReadError","","",null,null],[13,"Truncated","","",67,null],[13,"Invalid","","",67,null],[13,"NoMoreRecord","","",67,null],[4,"IndexedReaderError","","",null,null],[13,"InvalidIndex","","",68,null],[13,"BGZFError","","",68,null],[4,"WriterPathError","","",null,null],[13,"InvalidPath","","",69,null],[13,"BGZFError","","",69,null],[4,"IndexedReaderPathError","","",null,null],[13,"InvalidPath","","",70,null],[13,"IndexedReaderError","","",70,null],[4,"BGZFError","","",null,null],[13,"Some","","",71,null],[4,"ReaderPathError","","",null,null],[13,"InvalidPath","","",72,null],[13,"BGZFError","","",72,null],[4,"ThreadingError","","",null,null],[13,"Some","","",73,null],[4,"WriteError","","",null,null],[13,"Some","","",74,null],[4,"SeekError","","",null,null],[13,"Some","","",75,null],[0,"record","","",null,null],[3,"Record","rust_htslib::bam::record","A BAM record.",null,null],[12,"inner","","",76,null],[3,"Seq","","The sequence of a record.",null,null],[12,"encoded","","",77,null],[4,"Aux","","Auxiliary record data.",null,null],[13,"Integer","","",78,null],[13,"String","","",78,null],[13,"Float","","",78,null],[13,"Char","","",78,null],[4,"Cigar","","",null,null],[13,"Match","","",79,null],[13,"Ins","","",79,null],[13,"Del","","",79,null],[13,"RefSkip","","",79,null],[13,"SoftClip","","",79,null],[13,"HardClip","","",79,null],[13,"Pad","","",79,null],[13,"Equal","","",79,null],[13,"Diff","","",79,null],[13,"Back","","",79,null],[11,"new","","Create an empty BAM record.",76,{"inputs":[],"output":{"name":"self"}}],[11,"from_inner","","",76,null],[11,"inner_mut","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bam1_t"}}],[11,"inner","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bam1_t"}}],[11,"tid","","Get target id.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_tid","","Set target id.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"pos","","Get position (0-based).",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_pos","","Set position (0-based).",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"end_pos","","",76,null],[11,"bin","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_bin","","",76,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"mapq","","Get MAPQ.",76,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_mapq","","Set MAPQ.",76,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"flags","","Get raw flags.",76,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"set_flags","","Set raw flags.",76,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"unset_flags","","Unset all flags.",76,{"inputs":[{"name":"self"}],"output":null}],[11,"mtid","","Get target id of mate.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_mtid","","Set target id of mate.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"mpos","","Get mate position.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_mpos","","Set mate position.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"insert_size","","Get insert size.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"set_insert_size","","Set insert size.",76,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"qname","","Get qname (read name). Complexity: O(1).",76,null],[11,"set","","Set variable length data (qname, cigar, seq, qual).",76,null],[11,"cigar","","Get cigar sequence. Complexity: O(k) with k being the length of the cigar string.",76,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"seq","","Get read sequence. Complexity: O(1).",76,{"inputs":[{"name":"self"}],"output":{"name":"seq"}}],[11,"qual","","Get base qualities. Complexity: O(1).",76,null],[11,"aux","","Get auxiliary data (tags).",76,null],[11,"push_aux","","Add auxiliary data.",76,null],[11,"remove_aux","","",76,null],[11,"is_paired","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_paired","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_proper_pair","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_proper_pair","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_unmapped","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_unmapped","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_mate_unmapped","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_mate_unmapped","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_reverse","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_reverse","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_mate_reverse","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_mate_reverse","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_first_in_template","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_first_in_template","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_last_in_template","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_last_in_template","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_secondary","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_secondary","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_quality_check_failed","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_quality_check_failed","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_duplicate","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_duplicate","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"is_supplementary","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_supplementary","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"aux"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"aux"}],"output":{"name":"bool"}}],[11,"string","","Get string from aux data (panics if not a string).",78,null],[11,"float","","",78,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"integer","","",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"char","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"encoded_base","","Return encoded base. Complexity: O(1).",77,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"as_bytes","","Return decoded sequence. Complexity: O(m) with m being the read length.",77,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","Return length (in bases) of the sequence.",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"index","","Return decoded base at given position within read. Complexity: O(1).",77,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"cigar"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"cigar"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","rust_htslib::bam","",null,null],[3,"Header","rust_htslib::bam::header","A BAM header.",null,null],[3,"HeaderRecord","","Header record.",null,null],[11,"new","","Create a new header.",80,{"inputs":[],"output":{"name":"self"}}],[11,"from_template","","",80,{"inputs":[{"name":"headerview"}],"output":{"name":"self"}}],[11,"push_record","","Add a record to the header.",80,{"inputs":[{"name":"self"},{"name":"headerrecord"}],"output":{"name":"self"}}],[11,"push_comment","","Add a comment to the header.",80,null],[11,"to_bytes","","",80,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","Create a new header record. See SAM format specification for possible record types.",81,null],[11,"push_tag","","Add a new tag to the record.",81,null],[0,"pileup","rust_htslib::bam","",null,null],[3,"Pileup","rust_htslib::bam::pileup","A pileup over one genomic position.",null,null],[3,"Alignment","","An aligned read in a pileup.",null,null],[3,"Pileups","","Iterator over pileups.",null,null],[4,"Indel","","",null,null],[13,"Ins","","",82,null],[13,"Del","","",82,null],[13,"None","","",82,null],[4,"PileupError","","",null,null],[13,"Some","","",83,null],[6,"Alignments","","Iterator over alignments of a pileup.",null,null],[11,"tid","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pos","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"alignments","","",84,{"inputs":[{"name":"self"}],"output":{"name":"alignments"}}],[11,"new","","",85,{"inputs":[{"name":"bam_pileup1_t"}],"output":{"name":"self"}}],[11,"qpos","","Position within the read. None if either `is_del` or `is_refskip`.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"indel","","Insertion, deletion (with length) if indel starts at next base or None otherwise.",85,{"inputs":[{"name":"self"}],"output":{"name":"indel"}}],[11,"is_del","","Whether there is a deletion in the alignment at this position.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_head","","Whether the alignment starts at this position.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tail","","Whether the alignment ends at this position.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_refskip","","Whether this position is marked as refskip in the CIGAR string.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"record","","The corresponding record.",85,{"inputs":[{"name":"self"}],"output":{"name":"record"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"indel"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"indel"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",86,{"inputs":[{"name":"bam_plp_t"}],"output":{"name":"self"}}],[11,"set_max_depth","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Read","rust_htslib::bam","A trait for a BAM reader with a read method.",null,null],[10,"read","","Read next BAM record into given record. Use this method in combination with a single allocated record to avoid the reallocations occurring with the iterator.",87,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[10,"records","","Iterator over the records of the seeked region. Note that, while being convenient, this is less efficient than pre-allocating a `Record` and reading into it with the `read` method, since every iteration involves the allocation of a new `Record`.",87,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[10,"pileup","","Iterator over pileups.",87,{"inputs":[{"name":"self"}],"output":{"name":"pileups"}}],[10,"bgzf","","Return the BGZF struct",87,null],[10,"header","","Return the header.",87,{"inputs":[{"name":"self"}],"output":{"name":"headerview"}}],[11,"from_path","","Create a new Reader from path.",88,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_stdin","","Create a new Reader from STDIN.",88,{"inputs":[],"output":{"name":"result"}}],[11,"from_url","","Create a new Reader from URL.",88,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"read","","",88,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Iterator over the records of the seeked region. Note that, while being convenient, this is less efficient than pre-allocating a `Record` and reading into it with the `read` method, since every iteration involves the allocation of a new `Record`.",88,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[11,"pileup","","",88,{"inputs":[{"name":"self"}],"output":{"name":"pileups"}}],[11,"bgzf","","",88,null],[11,"header","","",88,{"inputs":[{"name":"self"}],"output":{"name":"headerview"}}],[11,"drop","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"from_path","","Create a new Reader from path.",66,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_url","","",66,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"seek","","",66,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"read","","",66,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Iterator over the records of the seeked region. Note that, while being convenient, this is less efficient than pre-allocating a `Record` and reading into it with the `read` method, since every iteration involves the allocation of a new `Record`.",66,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[11,"pileup","","",66,{"inputs":[{"name":"self"}],"output":{"name":"pileups"}}],[11,"bgzf","","",66,null],[11,"header","","",66,{"inputs":[{"name":"self"}],"output":{"name":"headerview"}}],[11,"drop","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"from_path","","Create a new BAM file.",89,{"inputs":[{"name":"p"},{"name":"header"}],"output":{"name":"result"}}],[11,"from_stdout","","Create a new BAM file at STDOUT.",89,{"inputs":[{"name":"header"}],"output":{"name":"result"}}],[11,"set_threads","","Activate multi-threaded BAM write support in htslib. This should permit faster writing of large BAM files. # Arguments",89,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write","","Write record to BAM.",89,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"header","","Return the header.",89,{"inputs":[{"name":"self"}],"output":{"name":"headerview"}}],[11,"drop","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_eof","","Returns true if no record has been read because the end of the file was reached.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",68,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",68,{"inputs":[{"name":"bgzferror"}],"output":{"name":"indexedreadererror"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",69,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",69,{"inputs":[{"name":"bgzferror"}],"output":{"name":"writerpatherror"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",70,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",70,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",70,{"inputs":[{"name":"indexedreadererror"}],"output":{"name":"indexedreaderpatherror"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",72,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",72,{"inputs":[{"name":"bgzferror"}],"output":{"name":"readerpatherror"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tid","","",91,null],[11,"target_count","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"target_names","","",91,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"target_len","","",91,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"as_bytes","","Retrieve the textual SAM header as bytes",91,null],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[0,"bcf","rust_htslib","",null,null],[3,"Reader","rust_htslib::bcf","",null,null],[12,"header","","",92,null],[3,"Writer","","",null,null],[12,"header","","",93,null],[3,"Records","","",null,null],[4,"BCFError","","",null,null],[13,"Some","","",94,null],[4,"BCFPathError","","",null,null],[13,"InvalidPath","","",95,null],[13,"BCFError","","",95,null],[4,"ReadError","","",null,null],[13,"Invalid","","",96,null],[13,"NoMoreRecord","","",96,null],[4,"WriteError","","",null,null],[13,"WriteError","","",97,null],[0,"record","","",null,null],[3,"Record","rust_htslib::bcf::record","",null,null],[12,"inner","","",98,null],[12,"header","","",98,null],[3,"Genotype","","Genotype representation as a vector of `GenotypeAllele`.",null,null],[3,"Genotypes","","Lazy representation of genotypes, that does no computation until a particular genotype is queried.",null,null],[3,"Info","","",null,null],[3,"Format","","",null,null],[4,"GenotypeAllele","","Phased or unphased alleles, represented as indices.",null,null],[13,"Unphased","","",99,null],[13,"Phased","","",99,null],[13,"UnphasedMissing","","",99,null],[13,"PhasedMissing","","",99,null],[4,"InfoReadError","","",null,null],[13,"UndefinedTag","","",100,null],[13,"UnexpectedType","","",100,null],[4,"FormatReadError","","",null,null],[13,"UndefinedTag","","",101,null],[13,"UnexpectedType","","",101,null],[13,"MissingTag","","",101,null],[4,"TagWriteError","","",null,null],[13,"Some","","",102,null],[4,"TrimAllelesError","","",null,null],[13,"Some","","",103,null],[8,"Numeric","","Common methods for numeric INFO and FORMAT entries",null,null],[10,"is_missing","","Return true if entry is a missing value",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"missing","","Return missing value for storage in BCF record.",104,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"inner","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bcf1_t"}}],[11,"inner_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bcf1_t"}}],[11,"rid","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pos","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_pos","","",98,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"alleles","","",98,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"qual","","",98,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_qual","","",98,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"info","","Get the value of the given info tag.",98,null],[11,"sample_count","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"allele_count","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"genotypes","","Get genotypes as vector of one `Genotype` per sample.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"format","","Get the value of the given format tag for each sample.",98,null],[11,"push_format_integer","","Add an integer format tag. Data is a flattened two-dimensional array. The first dimension contains one array for each sample. Returns error if tag is not present in header.",98,null],[11,"push_format_float","","Add a float format tag. Data is a flattened two-dimensional array. The first dimension contains one array for each sample. Returns error if tag is not present in header.",98,null],[11,"push_info_integer","","Add an integer info tag.",98,null],[11,"push_info_float","","Add a float info tag.",98,null],[11,"push_info","","Add an info tag.",98,null],[11,"trim_alleles","","Remove unused alleles.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_encoded","","Decode given integer according to BCF standard.",99,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"index","","",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Get genotype of ith sample. So far, only supports diploid genotypes.",106,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"genotype"}}],[11,"drop","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"integer","","Get integers from tag. `None` if tag not present in record. Import `bcf::record::Numeric` for missing value handling.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"integer_mut","","Get mutable integers from tag. `None` if tag not present in record. Import `bcf::record::Numeric` for missing value handling.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","Get floats from tag. `None` if tag not present in record. Import `bcf::record::Numeric` for missing value handling.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float_mut","","Get mutable floats from tag. `None` if tag not present in record. Import `bcf::record::Numeric` for missing value handling.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flag","","",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string","","Get strings from tag. `None` if tag not present in record.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string_mut","","Get mutable strings from tag. `None` if tag not present in record.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"inner","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bcf_fmt_t"}}],[11,"inner_mut","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bcf_fmt_t"}}],[11,"integer","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"integer_mut","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"float_mut","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string_mut","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",101,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",102,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"header","rust_htslib::bcf","",null,null],[3,"Header","rust_htslib::bcf::header","A BCF header.",null,null],[12,"inner","","",109,null],[12,"subset","","",109,null],[3,"HeaderView","","",null,null],[12,"inner","","",110,null],[4,"TagType","","",null,null],[13,"Flag","","",111,null],[13,"Integer","","",111,null],[13,"Float","","",111,null],[13,"String","","",111,null],[4,"TagLength","","",null,null],[13,"Fixed","","",112,null],[13,"AltAlleles","","",112,null],[13,"Alleles","","",112,null],[13,"Genotypes","","",112,null],[13,"Variable","","",112,null],[4,"RidError","","",null,null],[13,"UnknownSequence","","",113,null],[4,"SubsetError","","",null,null],[13,"DuplicateSampleName","","",114,null],[4,"TagTypeError","","",null,null],[13,"UnexpectedTagType","","",115,null],[13,"UndefinedTag","","",115,null],[6,"SampleSubset","","",null,null],[11,"new","","Create a new header.",109,{"inputs":[],"output":{"name":"self"}}],[11,"with_template","","",109,{"inputs":[{"name":"headerview"}],"output":{"name":"self"}}],[11,"subset_template","","",109,null],[11,"push_sample","","",109,null],[11,"push_record","","Add a record to the header.",109,null],[11,"remove_info","","",109,null],[11,"remove_format","","",109,null],[11,"drop","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",110,null],[11,"sample_count","","",110,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","",110,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"rid2name","","",110,null],[11,"name2rid","","",110,null],[11,"info_type","","",110,null],[11,"format_type","","",110,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_path","rust_htslib::bcf","",92,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_url","","",92,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"from_stdin","","",92,{"inputs":[],"output":{"name":"result"}}],[11,"read","","",92,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","",92,{"inputs":[{"name":"self"}],"output":{"name":"records"}}],[11,"drop","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"from_path","","",93,{"inputs":[{"name":"p"},{"name":"header"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from_url","","",93,{"inputs":[{"name":"url"},{"name":"header"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from_stdin","","",93,{"inputs":[{"name":"header"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"translate","","Translate record to header of this writer.",93,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"subset","","Subset samples of record to match header of this writer.",93,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"write","","",93,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"result"}}],[11,"drop","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",95,{"inputs":[{"name":"bcferror"}],"output":{"name":"bcfpatherror"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_eof","","Returns true if no record has been read because the end of the file was reached.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"utils","rust_htslib","",null,null],[5,"copy_memory","rust_htslib::utils","Copies data from `src` to `dst` TODO remove once stable in standard library.",null,null],[5,"path_to_cstring","","",null,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[0,"prelude","rust_htslib","The purpose of this module is to provide reexports of core traits so that they can be then glob-imported all at once:",null,null]],"paths":[[3,"Struct___kstring_t"],[3,"Struct_htsFormat"],[3,"Struct_Unnamed1"],[3,"Struct_Unnamed2"],[3,"Union_Unnamed3"],[3,"Struct_Unnamed4"],[3,"Struct_Unnamed5"],[3,"Struct_Unnamed6"],[3,"Struct_Unnamed7"],[3,"Struct_Unnamed8"],[3,"Struct_Unnamed9"],[3,"Struct_Unnamed10"],[3,"Struct___kstring_t"],[3,"Struct_htsFormat"],[3,"Struct_Unnamed1"],[3,"Struct_Unnamed2"],[3,"Union_Unnamed3"],[3,"Struct_Unnamed4"],[3,"Struct_Unnamed5"],[3,"Struct_Unnamed6"],[3,"Struct_Unnamed7"],[3,"Union_wait"],[3,"Struct_Unnamed8"],[3,"Struct_Unnamed9"],[3,"Union_Unnamed10"],[3,"Struct_Unnamed11"],[3,"Struct_Unnamed12"],[3,"Struct_Unnamed13"],[3,"Struct_Unnamed14"],[3,"Struct_timespec"],[3,"Struct_timeval"],[3,"Struct_Unnamed15"],[3,"Union_pthread_attr_t"],[3,"Struct___pthread_internal_list"],[3,"Union_Unnamed16"],[3,"Struct___pthread_mutex_s"],[3,"Union_Unnamed17"],[3,"Union_Unnamed18"],[3,"Struct_Unnamed19"],[3,"Union_Unnamed20"],[3,"Union_Unnamed21"],[3,"Struct_Unnamed22"],[3,"Union_Unnamed23"],[3,"Union_Unnamed24"],[3,"Union_Unnamed25"],[3,"Struct_random_data"],[3,"Struct_drand48_data"],[3,"Struct___locale_struct"],[3,"Struct_Unnamed26"],[3,"Union_Unnamed27"],[3,"Struct_Unnamed28"],[3,"Struct_Unnamed29"],[3,"Struct__IO_marker"],[3,"Struct__IO_FILE"],[3,"Struct_Unnamed30"],[3,"Struct_Unnamed31"],[3,"Struct_Unnamed32"],[3,"Struct_Unnamed33"],[3,"Struct_Unnamed34"],[3,"Struct_Unnamed35"],[3,"Struct_Unnamed36"],[3,"Struct_Unnamed37"],[3,"Union_Unnamed38"],[3,"Struct_Unnamed39"],[3,"Struct_Unnamed40"],[3,"Struct___va_list_tag"],[3,"IndexedReader"],[4,"ReadError"],[4,"IndexedReaderError"],[4,"WriterPathError"],[4,"IndexedReaderPathError"],[4,"BGZFError"],[4,"ReaderPathError"],[4,"ThreadingError"],[4,"WriteError"],[4,"SeekError"],[3,"Record"],[3,"Seq"],[4,"Aux"],[4,"Cigar"],[3,"Header"],[3,"HeaderRecord"],[4,"Indel"],[4,"PileupError"],[3,"Pileup"],[3,"Alignment"],[3,"Pileups"],[8,"Read"],[3,"Reader"],[3,"Writer"],[3,"Records"],[3,"HeaderView"],[3,"Reader"],[3,"Writer"],[4,"BCFError"],[4,"BCFPathError"],[4,"ReadError"],[4,"WriteError"],[3,"Record"],[4,"GenotypeAllele"],[4,"InfoReadError"],[4,"FormatReadError"],[4,"TagWriteError"],[4,"TrimAllelesError"],[8,"Numeric"],[3,"Genotype"],[3,"Genotypes"],[3,"Info"],[3,"Format"],[3,"Header"],[3,"HeaderView"],[4,"TagType"],[4,"TagLength"],[4,"RidError"],[4,"SubsetError"],[4,"TagTypeError"],[3,"Records"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&[u8]` and `Vec<u8>`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec<u8>` in order to serialize and deserialize in an efficient way.",null,null],[3,"Bytes","","Wraps a `&[u8]` in order to serialize in an efficient way. Does not support deserialization.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Wrap an existing `&[u8]`.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"visit_variant_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_seed","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_key_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_value_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","Deserialize a `&str` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","Deserialize an absent optional `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","Deserialize a present optional `Value`.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","Deserialize `Value` as an enum.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","Deserialize a `&[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec<u8>` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to identify which variant of an enum to deserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error while serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and `Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_codegen_internals"] = {"doc":"","items":[[3,"Ctxt","serde_codegen_internals","",null,null],[0,"ast","","",null,null],[3,"Item","serde_codegen_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"item"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"attr","serde_codegen_internals","",null,null],[3,"Name","serde_codegen_internals::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_codegen_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_codegen_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_codegen_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_codegen_internals::attr","`#[serde(untagged)]`",6,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",7,null],[13,"Default","","The default is given by `std::default::Default::default()`.",7,null],[13,"Path","","The default is given by this function.",7,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",9,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",9,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",9,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",10,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",10,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",11,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",11,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_codegen_internals","",12,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_codegen_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Default"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_derive"] = {"doc":"","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"BidiInfo","unicode_bidi","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property **Bidi_Class**, also known as the *bidirectional character type*.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of Unicode that the `bidi_class` function is based on.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of Unicode that this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 *A Recommendation for IPv6 Address Text Representation*: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",10,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"as_mut_string","url","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",13,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[0,"percent_encoding","url","",null,null],[3,"SIMPLE_ENCODE_SET","url::percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",15,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"contains","","",16,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"contains","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"contains","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"contains","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"contains","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",22,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"UrlQuery"],[3,"Serializer"],[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vcf_rider"] = {"doc":"vcf_rider: a library to efficiently compute score on individual genomes starting from vcf files","items":[[0,"fasta","vcf_rider","The module used for reading the fasta file representing the genome of interest. Right now it should contain a single chromosome to be used with `vcf_rider`, but the module can handle also multifasta files. The id of the fasta should be the same used in the vcf file and with genomic regions represented in the used bed.",null,null],[3,"Fasta","vcf_rider::fasta","Struct representing a fasta: its id, then the sequence (encoded by a vector of u8, with ACGTN -> 01234) and the background frequencies of nucleotides (needed to compute TBA values)",null,null],[12,"id","","The id of this fasta",0,null],[12,"sequence","","The u8 encoded sequence",0,null],[12,"background","","Background frequences of ACGT in this fasta",0,null],[3,"FastaReader","","Struct used to read fasta files. It will be implement an Iterator of Fasta structs. The String buffer is used to get characters from the BufReader one by one and convert them to our internal Vec<u8> representation.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Opens a fasta file returning a `Result<FastaReader>`. # Arguments",1,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"open_path","","Opens a fasta file returning a `Result<FastaReader>`. # Arguments",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"pwm","vcf_rider","",null,null],[3,"Matrix","vcf_rider::pwm","",null,null],[3,"PWM","","",null,null],[12,"name","","",2,null],[12,"ll","","",2,null],[12,"llrc","","",2,null],[12,"freq","","",2,null],[3,"PWMReader","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"with_capacity","","",3,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push_row_4","","",3,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"push_row_5","","",3,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"f64"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_length","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_name","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_score","","",2,null],[11,"compute_ll","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"open","","",4,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"open_path","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"rider","vcf_rider","",null,null],[3,"RiderParameters","vcf_rider::rider","",null,null],[12,"min_len","","",5,null],[12,"max_len","","",5,null],[12,"parameters","","",5,null],[5,"get_scores","","",null,{"inputs":[{"name":"riderparameters"},{"name":"str"},{"name":"reader"},{"name":"str"},{"name":"option"}],"output":null}],[5,"match_indexes","","",null,{"inputs":[{"name":"bitvec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[5,"find_overlapping_snps","","Function that advances on the VcfReader (Iterator of Mutation) until the first snp that does not overlap with the given window, putting in snps_buffer all the overlapping snps and their number and then the first not overlapping snp.",null,{"inputs":[{"name":"coordinate"},{"name":"i"},{"name":"vecdeque"}],"output":{"name":"usize"}}],[5,"print_overlapping","","",null,{"inputs":[{"name":"vecdeque"},{"name":"usize"},{"name":"write"},{"name":"record"}],"output":null}],[5,"obtain_seq","","",null,{"inputs":[{"name":"coordinate"},{"name":"vecdeque"},{"name":"vec"},{"name":"fasta"},{"name":"vec"},{"name":"vec"},{"name":"u64"}],"output":null}],[5,"encode_genotypes","","",null,{"inputs":[{"name":"vecdeque"},{"name":"vec"},{"name":"vec"},{"name":"usize"},{"name":"vec"}],"output":{"name":"vec"}}],[8,"CanScoreSequence","","Our vcf_rider main function will receive a Vec<T: CanScoreSequence> and call it for every T on subsequences of the genomes of the samples doing it only for each variant subsequence once. This trait will need to be able to compute a score on a given sequence, represented by a splice of an array of u8 [TODO] starting for a given position (it is guaranteed by the lib that the used position will be given inside the sequence, i.e. sequence.len() - self.get_length() >= 0).",null,null],[10,"get_score","","Returns a score for the given sequence starting at position pos.",6,null],[10,"get_length","","Returns the length of sequence that this object can score.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_name","","Returns the name of this.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"mutations","vcf_rider","",null,null],[3,"Coordinate","vcf_rider::mutations","",null,null],[12,"chr","","",7,null],[12,"start","","",7,null],[12,"end","","",7,null],[3,"Mutation","","",null,null],[12,"id","","",8,null],[12,"pos","","",8,null],[12,"sequence_ref","","",8,null],[12,"sequence_alt","","",8,null],[12,"genotypes","","",8,null],[12,"is_indel","","",8,null],[12,"indel_len","","",8,null],[3,"VcfReader","","",null,null],[12,"samples","","",9,null],[4,"Position","","",null,null],[13,"Before","","",10,null],[13,"Overlapping","","",10,null],[13,"After","","",10,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"coordinate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relative_position","","Returns the position of self relative to other.",7,{"inputs":[{"name":"self"},{"name":"coordinate"}],"output":{"name":"position"}}],[11,"relative_position_overlap","","",7,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"mutation"}}],[11,"open_path","","",9,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Fasta"],[3,"FastaReader"],[3,"PWM"],[3,"Matrix"],[3,"PWMReader"],[3,"RiderParameters"],[8,"CanScoreSequence"],[3,"Coordinate"],[3,"Mutation"],[3,"VcfReader"],[4,"Position"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
